{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"irgsctool Getting Started This package is a tool to generate the catalog of Natural Guide Stars (NGS) based on the requirements of the NFIRAOS, the facility Adaptive Optics system on the Thirty Meter Telescope (TMT). This tool obtains the optical data from PANSTARRS DR2 and generates a catalog of the computed Near-Infrared (NIR) magnitudes. There is also an option in this tool to validate the computed NIR magnitudes using the readily available NIR observed data from UKIDSS DR11 (in the regions where the UKIDSS data is available.) Installation This package can be installed in two ways: 1. Using pip In a fresh environment, enter the following command pip install irgsctool 2. Uing .zip file on GitHub here After downloading the .zip file, unzip it into a directory and type pip install . This will install irgsctool locally in your system. 3. Using the Development version from GitHub: Open the terminal in your system and run: pip install git+https://github.com/sshah1502/irgsc@main This will also install the package locally in your system.","title":"Home"},{"location":"#irgsctool","text":"","title":"irgsctool"},{"location":"#getting-started","text":"This package is a tool to generate the catalog of Natural Guide Stars (NGS) based on the requirements of the NFIRAOS, the facility Adaptive Optics system on the Thirty Meter Telescope (TMT). This tool obtains the optical data from PANSTARRS DR2 and generates a catalog of the computed Near-Infrared (NIR) magnitudes. There is also an option in this tool to validate the computed NIR magnitudes using the readily available NIR observed data from UKIDSS DR11 (in the regions where the UKIDSS data is available.)","title":"Getting Started"},{"location":"#installation","text":"This package can be installed in two ways:","title":"Installation"},{"location":"#1-using-pip","text":"In a fresh environment, enter the following command pip install irgsctool","title":"1. Using pip"},{"location":"#2-uing-zip-file-on-github-here","text":"After downloading the .zip file, unzip it into a directory and type pip install . This will install irgsctool locally in your system.","title":"2. Uing .zip file on GitHub here"},{"location":"#3-using-the-development-version-from-github","text":"Open the terminal in your system and run: pip install git+https://github.com/sshah1502/irgsc@main This will also install the package locally in your system.","title":"3. Using the Development version from GitHub:"},{"location":"about/","text":"About irgsctool irgsctool to generate the catalog of NIR guide stars for Adaptive Optics (AO) observations of the Thirty Meter Telescope (TMT). The module computes the NIR magnitudes of the optical sources in the PANSTARRS data. Motivation to generate irgsctool The performance of any ground-based optical/near-infrared (NIR) telescope is affected by the turbulence in the atmosphere of Earth. When the light from a distant astronomical source passes through Earth's turbulent atmosphere, it distorts the wavefront of the light. These distortions make the science images appear fuzzy/blurry. To improve the performance of the ground-based optical/NIR telescopes by compensating for the effects of wavefront distortions, astronomers use a technique known as Adaptive Optics (AO). An AO system tries to correct the distortions using a WaveFront Sensor (WFS), which takes some of the astronomical light, a deformable mirror that lies in the optical path, and a computer that receives input from the detector (Refer Figure: (1)). Figure 1: A conceptual image of the working of an AO system. A WFS is a high-speed camera that detects the deformity in the incoming light several thousand times per second. After measuring the deformity, the WFS sends feedback to the system-controlling computer, which then changes the shape of the deformable mirror so that the light eventually becomes distortion-free. This distortion-free light is then fed to the science instruments in the telescopes to obtain high-quality images with a spatial resolution close to the theoretical diffraction limit. A science target to be studied is often too faint or extended to be used as a reference for measuring the shape of the incident wave-fronts. Instead, a nearby brighter guide star can be used for distortion correction. But, sufficiently bright stars are not available in all parts of the sky, which significantly limits the usefulness of natural guide star AO. This limitation can be overcome by creating an artificial guide star by shining a laser into the mesosphere and creating an asterism. However, much fainter natural reference stars are still required for image position or tip/tilt correction. The Thirty Meter Telescope (TMT) is one of the largest optical and near-infrared (NIR) ground-based telescopes to be built, and the first light is expected in the next decade. The first light NIR instruments of TMT will be assisted by a multi-conjugate AO instrument, known as Narrow Field Infrared Adaptive Optics System (NFIRAOS) (see Figure: (2)). NFIRAOS will have a field of view (FOV) of 2-arcmin diameter and will use laser guide stars (LGS) for distortion correction. However, it will require three or more natural guide stars for tip/tilt correction. A catalog of guide stars will thus be a critical resource for TMT operations. It will enable efficient planning and observations, fulfilling a role similar to that of the Guide Star Catalogs I and II, which were created to allow for the acquisition and control of the Hubble Space Telescope. The TMT Infrared Guide Star Catalog (TMT-IRGSC) should be a star catalog consisting of point sources with NIR (J, H, Ks) magnitudes as faint as 22 mag in the J band in the Vega system covering the entire TMT-observable sky. No catalog currently exists with objects as faint as J_Vega = 22 mag over the entire TMT observable sky to be used as a guide star catalog. Hence it is essential to develop this catalog by computing the expected NIR magnitudes of stellar sources identified in various optical sky surveys using their optical magnitudes. Figure 2: A rendered image of the facility AO system on TMT - NFIRAOS.","title":"About"},{"location":"about/#about-irgsctool","text":"irgsctool to generate the catalog of NIR guide stars for Adaptive Optics (AO) observations of the Thirty Meter Telescope (TMT). The module computes the NIR magnitudes of the optical sources in the PANSTARRS data.","title":"About irgsctool"},{"location":"about/#motivation-to-generate-irgsctool","text":"The performance of any ground-based optical/near-infrared (NIR) telescope is affected by the turbulence in the atmosphere of Earth. When the light from a distant astronomical source passes through Earth's turbulent atmosphere, it distorts the wavefront of the light. These distortions make the science images appear fuzzy/blurry. To improve the performance of the ground-based optical/NIR telescopes by compensating for the effects of wavefront distortions, astronomers use a technique known as Adaptive Optics (AO). An AO system tries to correct the distortions using a WaveFront Sensor (WFS), which takes some of the astronomical light, a deformable mirror that lies in the optical path, and a computer that receives input from the detector (Refer Figure: (1)). Figure 1: A conceptual image of the working of an AO system. A WFS is a high-speed camera that detects the deformity in the incoming light several thousand times per second. After measuring the deformity, the WFS sends feedback to the system-controlling computer, which then changes the shape of the deformable mirror so that the light eventually becomes distortion-free. This distortion-free light is then fed to the science instruments in the telescopes to obtain high-quality images with a spatial resolution close to the theoretical diffraction limit. A science target to be studied is often too faint or extended to be used as a reference for measuring the shape of the incident wave-fronts. Instead, a nearby brighter guide star can be used for distortion correction. But, sufficiently bright stars are not available in all parts of the sky, which significantly limits the usefulness of natural guide star AO. This limitation can be overcome by creating an artificial guide star by shining a laser into the mesosphere and creating an asterism. However, much fainter natural reference stars are still required for image position or tip/tilt correction. The Thirty Meter Telescope (TMT) is one of the largest optical and near-infrared (NIR) ground-based telescopes to be built, and the first light is expected in the next decade. The first light NIR instruments of TMT will be assisted by a multi-conjugate AO instrument, known as Narrow Field Infrared Adaptive Optics System (NFIRAOS) (see Figure: (2)). NFIRAOS will have a field of view (FOV) of 2-arcmin diameter and will use laser guide stars (LGS) for distortion correction. However, it will require three or more natural guide stars for tip/tilt correction. A catalog of guide stars will thus be a critical resource for TMT operations. It will enable efficient planning and observations, fulfilling a role similar to that of the Guide Star Catalogs I and II, which were created to allow for the acquisition and control of the Hubble Space Telescope. The TMT Infrared Guide Star Catalog (TMT-IRGSC) should be a star catalog consisting of point sources with NIR (J, H, Ks) magnitudes as faint as 22 mag in the J band in the Vega system covering the entire TMT-observable sky. No catalog currently exists with objects as faint as J_Vega = 22 mag over the entire TMT observable sky to be used as a guide star catalog. Hence it is essential to develop this catalog by computing the expected NIR magnitudes of stellar sources identified in various optical sky surveys using their optical magnitudes. Figure 2: A rendered image of the facility AO system on TMT - NFIRAOS.","title":"Motivation to generate irgsctool"},{"location":"acknowledgements/","text":"Please add the following acknowledgment if you use our package in your work. This work has made use of Infrared Guide Star Catalog (IRGSC) developed as a part of the Thirty Meter Telescope (TMT) project.\" If you have any questions or suggestions for improvements to this repo, please email: sarang.itcc@iiap.res.in","title":"Acknowledgements"},{"location":"apireference/","text":"API Reference This page introduces to the classes and functions in the irgsctool package. The main class is the irgsc class which has several subclasses like GetData, ReadData, StarGalaxyClassification, ExtinctionCorrection, GenerateIRGSC, ValidateIRGSC irgsc Bases: GetData , ReadData , StarGalaxyClassification , ExtinctionCorrection , Models , GenerateIRGSC , ValidateIRGSC Initialisation of parent irgsc Class. Source code in irgsctool/__init__.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class irgsc ( GetData , ReadData , StarGalaxyClassification , ExtinctionCorrection , Models , GenerateIRGSC , ValidateIRGSC ): \"\"\" Initialisation of parent irgsc Class. \"\"\" print ( '##########################################################################' ) print ( \"\" ) print ( 'Initializing' ) print ( \"\" ) print ( '##########################################################################' ) print ( \"\" ) def __init__ ( self , ra , dec , validate = None ): \"\"\" __init__ function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: ValueError: if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not\\ proceed further. Warning: if the data is not available in the Gaia DR3\\ survey. \"\"\" print ( '' ) print ( '##################################################' ) print ( 'Checking the input coordinates' ) print ( '' ) print ( '##################################################' ) print ( '' ) self . ra = ra self . dec = dec self . validate = validate gd = GetData ( self . ra , self . dec ) rd = ReadData ( self . ra , self . dec ) if self . ra < 0.0 or self . dec <- 30.0 : raise ValueError ( 'Please check the input coordinates' ) sys . exit ( 0 ) ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) #Checking whether UKIDSS data is available for the given field. ###If yes then obtaining it. file_name = 'UKIDSS' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : validating_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_ukidss_data ( self . ra , self . dec ) validating_data = rd . read_nir_data ( self . ra , self . dec ) self . validate = True if len ( validating_data ) == 0.0 : self . validate = False raise ValueError ( 'UKIDSS Observed NIR data not available. \\ Validation of the generated IRGSC is not \\ possible for this field!!!' ) sys . exit ( 0 ) ###Obtaining the PANSTARRS data for the given field. file_name = 'PS1' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : optical_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_panstarrs_data ( self . ra , self . dec ) optical_data = np . genfromtxt ( file_name + '.csv' ) if len ( optical_data ) == 0.0 : raise ValueError ( 'Optical data is outside the range of PANSTARRS 3-pi survey. \\ Please check the input coordinates!!!' ) sys . exit ( 0 ) #Obtaining the GAIA data for the given field file_name = 'GAIA' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_gaia_data ( self . ra , self . dec ) gaia_data = np . genfromtxt ( file_name + '.csv' ) if len ( gaia_data ) == 0.0 : warnings . warn ( 'GAIA data not available for this field!!! \\ The generated catalog will contain -999 \\ values for GAIA information.' ) __init__ ( ra , dec , validate = None ) init function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: Type Description ValueError if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not proceed further. Warning if the data is not available in the Gaia DR3 survey. Source code in irgsctool/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def __init__ ( self , ra , dec , validate = None ): \"\"\" __init__ function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: ValueError: if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not\\ proceed further. Warning: if the data is not available in the Gaia DR3\\ survey. \"\"\" print ( '' ) print ( '##################################################' ) print ( 'Checking the input coordinates' ) print ( '' ) print ( '##################################################' ) print ( '' ) self . ra = ra self . dec = dec self . validate = validate gd = GetData ( self . ra , self . dec ) rd = ReadData ( self . ra , self . dec ) if self . ra < 0.0 or self . dec <- 30.0 : raise ValueError ( 'Please check the input coordinates' ) sys . exit ( 0 ) ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) #Checking whether UKIDSS data is available for the given field. ###If yes then obtaining it. file_name = 'UKIDSS' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : validating_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_ukidss_data ( self . ra , self . dec ) validating_data = rd . read_nir_data ( self . ra , self . dec ) self . validate = True if len ( validating_data ) == 0.0 : self . validate = False raise ValueError ( 'UKIDSS Observed NIR data not available. \\ Validation of the generated IRGSC is not \\ possible for this field!!!' ) sys . exit ( 0 ) ###Obtaining the PANSTARRS data for the given field. file_name = 'PS1' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : optical_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_panstarrs_data ( self . ra , self . dec ) optical_data = np . genfromtxt ( file_name + '.csv' ) if len ( optical_data ) == 0.0 : raise ValueError ( 'Optical data is outside the range of PANSTARRS 3-pi survey. \\ Please check the input coordinates!!!' ) sys . exit ( 0 ) #Obtaining the GAIA data for the given field file_name = 'GAIA' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_gaia_data ( self . ra , self . dec ) gaia_data = np . genfromtxt ( file_name + '.csv' ) if len ( gaia_data ) == 0.0 : warnings . warn ( 'GAIA data not available for this field!!! \\ The generated catalog will contain -999 \\ values for GAIA information.' ) Module to obtain data or a given set of input coordinates. GetData Class to obtain PANSTARRS DR2 Stacked optical photometry data, UKIDSS NIR observed data and GAIA DR3 astrometry data. The default search radius is 0.25 degrees due to the limitation of pyvo. The data retrieved is stored in .csv format with the name of the survey + ra + dec Input R.A. (float) degrees Dec. (float) degrees Range Dec > -30 degrees Examples: >>> get_panstarrs_data ( 0.0 , 0.0 ) 'PS1_RA_0_0_DEC_0_0.csv' >>> get_gaia_data ( 0.0 , 0.0 ) 'GAIA_RA_0_0_DEC_0_0.csv' >>> get_ukidss_data ( 0.0 , 0.0 ) 'UKIDSS_RA_0_0_DEC_0_0.csv' Source code in irgsctool/_get_data.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class GetData (): \"\"\" Class to obtain PANSTARRS DR2 Stacked optical photometry data, UKIDSS NIR observed data and GAIA DR3 astrometry data. The default search radius is 0.25 degrees due to the limitation of pyvo. The data retrieved is stored in .csv format with the name of the survey + ra + dec Input: R.A. (float) degrees Dec. (float) degrees Range: Dec > -30 degrees Examples: >>> get_panstarrs_data(0.0,0.0) 'PS1_RA_0_0_DEC_0_0.csv' >>> get_gaia_data(0.0,0.0) 'GAIA_RA_0_0_DEC_0_0.csv' >>> get_ukidss_data(0.0,0.0) 'UKIDSS_RA_0_0_DEC_0_0.csv' \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec def get_panstarrs_data ( self ): \"\"\" Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' Tap_Service = vo . dal . TAPService ( \"https://vao.stsci.edu/PS1DR2/tapservice.aspx\" ) #Tap_service.describe() Tap_Tables = Tap_Service . tables #for tablename in Tap_Tables.keys(): #if not \"TAP_schema\" in tablename: #Tap_Tables[tablename].describe() #print(\"Columns={}\".format(sorted([k.name for k in\\ # Tap_Tables[tablename].columns ]))) #print(\"----\") query = \"\"\" SELECT objID, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2, zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3 FROM dbo.StackObjectView WHERE CONTAINS(POINT('ICRS', RAMean, DecMean),CIRCLE('ICRS', {} , {} , {} ))=1 \"\"\" . format ( self . ra , self . dec , 0.25 ) try : job = Tap_Service . search ( query ) Tap_Results = job . to_table () np . savetxt ( str ( file_name ), \\ Tap_Results , delimiter = ',' , header = 'objid, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2,zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3' ) except Exception : raise ValueError ( 'This field is outside the sky coverage of PANSTARRS' ) return Tap_Results def get_gaia_data ( self ): \"\"\" Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all\\ the rows in the given field. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' #tables = Gaia.load_tables(only_names=True) #for table in (tables): #print (table.get_qualified_name()) coord = SkyCoord ( ra = self . ra , dec = self . dec , unit = ( u . degree , u . degree ), frame = 'icrs' ) Gaia . MAIN_GAIA_TABLE = \"gaiadr3.gaia_source\" Gaia . ROW_LIMIT = - 1 try : job = Gaia . cone_search ( coordinate = coord , radius = u . Quantity ( 0.25 , u . deg ), \\ table_name = \"gaiadr3.gaia_source\" , \\ output_file = file_name , output_format = 'csv' , verbose = True , \\ dump_to_file = True , columns = [ 'source_id' , 'ra' , 'ra_error' , 'dec' , \\ 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , \\ 'pmdec_error' , 'ruwe' ]) except Exception : raise ValueError ( 'No Gaia observations for this field' ) return job . get_results () def get_ukidss_data ( self ): \"\"\" Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. \"\"\" catalogs = [ 'UDS' , 'GCS' , 'GPS' , 'DXS' , 'LAS' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' Ukidss . filters = { 'H' : 4 , 'J' : 3 , 'K' : 5 } for i in range ( len ( catalogs )): print ( '' ) print ( 'Name of the catalog:' , str ( catalogs [ i ])) try : table = Ukidss . query_region ( SkyCoord ( self . ra , self . dec , unit = ( u . deg , u . deg ), frame = 'icrs' ), \\ radius = 0.25 * u . deg , programme_id = str ( catalogs [ i ]), \\ database = 'UKIDSSDR11PLUS' , attributes = [ 'ra' , 'dec' , 'jPetroMag' , 'jPetroMagErr' , 'hPetroMag' , 'hPetroMagErr' , 'kPetroMag' , 'kPetroMagErr' ], verbose = True ) table . write ( file_name , format = 'csv' , overwrite = True ) except Exception : raise ValueError ( 'No observations in' + ' ' + str ( catalogs [ i ]) + ' ' + 'catalog of UKIDSS' ) return table get_gaia_data () Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all the rows in the given field. Source code in irgsctool/_get_data.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_gaia_data ( self ): \"\"\" Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all\\ the rows in the given field. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' #tables = Gaia.load_tables(only_names=True) #for table in (tables): #print (table.get_qualified_name()) coord = SkyCoord ( ra = self . ra , dec = self . dec , unit = ( u . degree , u . degree ), frame = 'icrs' ) Gaia . MAIN_GAIA_TABLE = \"gaiadr3.gaia_source\" Gaia . ROW_LIMIT = - 1 try : job = Gaia . cone_search ( coordinate = coord , radius = u . Quantity ( 0.25 , u . deg ), \\ table_name = \"gaiadr3.gaia_source\" , \\ output_file = file_name , output_format = 'csv' , verbose = True , \\ dump_to_file = True , columns = [ 'source_id' , 'ra' , 'ra_error' , 'dec' , \\ 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , \\ 'pmdec_error' , 'ruwe' ]) except Exception : raise ValueError ( 'No Gaia observations for this field' ) return job . get_results () get_panstarrs_data () Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. Source code in irgsctool/_get_data.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get_panstarrs_data ( self ): \"\"\" Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' Tap_Service = vo . dal . TAPService ( \"https://vao.stsci.edu/PS1DR2/tapservice.aspx\" ) #Tap_service.describe() Tap_Tables = Tap_Service . tables #for tablename in Tap_Tables.keys(): #if not \"TAP_schema\" in tablename: #Tap_Tables[tablename].describe() #print(\"Columns={}\".format(sorted([k.name for k in\\ # Tap_Tables[tablename].columns ]))) #print(\"----\") query = \"\"\" SELECT objID, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2, zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3 FROM dbo.StackObjectView WHERE CONTAINS(POINT('ICRS', RAMean, DecMean),CIRCLE('ICRS', {} , {} , {} ))=1 \"\"\" . format ( self . ra , self . dec , 0.25 ) try : job = Tap_Service . search ( query ) Tap_Results = job . to_table () np . savetxt ( str ( file_name ), \\ Tap_Results , delimiter = ',' , header = 'objid, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2,zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3' ) except Exception : raise ValueError ( 'This field is outside the sky coverage of PANSTARRS' ) return Tap_Results get_ukidss_data () Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. Source code in irgsctool/_get_data.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def get_ukidss_data ( self ): \"\"\" Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. \"\"\" catalogs = [ 'UDS' , 'GCS' , 'GPS' , 'DXS' , 'LAS' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' Ukidss . filters = { 'H' : 4 , 'J' : 3 , 'K' : 5 } for i in range ( len ( catalogs )): print ( '' ) print ( 'Name of the catalog:' , str ( catalogs [ i ])) try : table = Ukidss . query_region ( SkyCoord ( self . ra , self . dec , unit = ( u . deg , u . deg ), frame = 'icrs' ), \\ radius = 0.25 * u . deg , programme_id = str ( catalogs [ i ]), \\ database = 'UKIDSSDR11PLUS' , attributes = [ 'ra' , 'dec' , 'jPetroMag' , 'jPetroMagErr' , 'hPetroMag' , 'hPetroMagErr' , 'kPetroMag' , 'kPetroMagErr' ], verbose = True ) table . write ( file_name , format = 'csv' , overwrite = True ) except Exception : raise ValueError ( 'No observations in' + ' ' + str ( catalogs [ i ]) + ' ' + 'catalog of UKIDSS' ) return table Module to read the data downloaded for the given set of input coordinates. ReadData Class to read the photometric data from PS1 DR2, GAIA DR3 and UKIDSS DR11. Source code in irgsctool/_read_data.pyclass ReadData (): \"\"\"Class to read the photometric data from PS1 DR2, GAIA DR3 and UKIDSS DR11. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . gd = GetData ( ra , dec ) def read_optical_data ( self ): \"\"\" Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) except FileNotFoundError : self . gd . get_panstarrs_data () ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) ps1_objid = ps1_data [:, 0 ] ps_ra = ps1_data [:, 1 ] err_ps_ra = ps1_data [:, 2 ] ps_dec = ps1_data [:, 3 ] err_ps_dec = ps1_data [:, 4 ] gmag = ps1_data [:, 5 ] e_gmag = ps1_data [:, 6 ] gkron = ps1_data [:, 7 ] e_gkron = ps1_data [:, 8 ] rmag = ps1_data [:, 9 ] e_rmag = ps1_data [:, 10 ] rkron = ps1_data [:, 11 ] e_rkron = ps1_data [:, 12 ] imag = ps1_data [:, 13 ] e_imag = ps1_data [:, 14 ] ikron = ps1_data [:, 15 ] e_ikron = ps1_data [:, 16 ] zmag = ps1_data [:, 17 ] e_zmag = ps1_data [:, 18 ] zkron = ps1_data [:, 19 ] e_zkron = ps1_data [:, 20 ] ymag = ps1_data [:, 21 ] e_ymag = ps1_data [:, 22 ] ykron = ps1_data [:, 23 ] e_ykron = ps1_data [:, 24 ] objinfoflag = ps1_data [:, 25 ] qualityflag = ps1_data [:, 26 ] ndetections = ps1_data [:, 27 ] nstackdetections = ps1_data [:, 28 ] ginfoflag = ps1_data [:, 29 ] ginfoflag2 = ps1_data [:, 30 ] ginfoflag3 = ps1_data [:, 31 ] rinfoflag = ps1_data [:, 32 ] rinfoflag2 = ps1_data [:, 33 ] rinfoflag3 = ps1_data [:, 34 ] iinfoflag = ps1_data [:, 35 ] iinfoflag2 = ps1_data [:, 36 ] iinfoflag3 = ps1_data [:, 37 ] zinfoflag = ps1_data [:, 38 ] zinfoflag2 = ps1_data [:, 39 ] zinfoflag3 = ps1_data [:, 40 ] yinfoflag = ps1_data [:, 41 ] yinfoflag2 = ps1_data [:, 42 ] yinfoflag3 = ps1_data [:, 43 ] ps1_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gmag , \\ e_gmag , gkron , e_gkron , rmag , e_rmag , rkron , e_rkron , imag , \\ e_imag , ikron , e_ikron , zmag , e_zmag , zkron , e_zkron , ymag , \\ e_ymag , ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , \\ yinfoflag3 print ( 'Number of rows in the PANSTARRS file:' , \\ len ( ps1_objid )) oid1 = np . array ([ list ( set ( ps1_objid ))])[ 0 ] oid1 = [ * set ( ps1_objid )] ptsf = [] for i in range ( len ( oid1 )): ptsi = np . where ( oid1 [ i ] == ps1_objid )[ 0 ] if len ( ptsi ) > 1.0 : ptsi = ptsi [ 0 ] ptsf = np . append ( ptsf , ptsi ) ptsf = np . int64 ( ptsf ) else : ptsf = np . append ( ptsf , ptsi ) ps1_objid = ps1_objid [ ptsf ] ps_ra = ps_ra [ ptsf ] ps_dec = ps_dec [ ptsf ] err_ps_ra = err_ps_ra [ ptsf ] err_ps_dec = err_ps_dec [ ptsf ] gmag = gmag [ ptsf ] gkron = gkron [ ptsf ] e_gmag = e_gmag [ ptsf ] e_gkron = e_gkron [ ptsf ] rmag = rmag [ ptsf ] rkron = rkron [ ptsf ] e_rmag = e_rmag [ ptsf ] e_rkron = e_rkron [ ptsf ] imag = imag [ ptsf ] ikron = ikron [ ptsf ] e_imag = e_imag [ ptsf ] e_ikron = e_ikron [ ptsf ] zmag = zmag [ ptsf ] zkron = zkron [ ptsf ] e_zmag = e_zmag [ ptsf ] e_zkron = e_zkron [ ptsf ] ymag = ymag [ ptsf ] ykron = ykron [ ptsf ] e_ymag = e_ymag [ ptsf ] e_ykron = e_ykron [ ptsf ] objinfoflag = objinfoflag [ ptsf ] qualityflag = qualityflag [ ptsf ] ndetections = ndetections [ ptsf ] nstackdetections = nstackdetections [ ptsf ] ginfoflag = ginfoflag [ ptsf ] ginfoflag2 = ginfoflag2 [ ptsf ] ginfoflag3 = ginfoflag3 [ ptsf ] rinfoflag = rinfoflag [ ptsf ] rinfoflag2 = rinfoflag2 [ ptsf ] rinfoflag3 = rinfoflag3 [ ptsf ] iinfoflag = iinfoflag [ ptsf ] iinfoflag2 = iinfoflag2 [ ptsf ] iinfoflag3 = iinfoflag3 [ ptsf ] zinfoflag = zinfoflag [ ptsf ] zinfoflag2 = zinfoflag2 [ ptsf ] zinfoflag3 = zinfoflag3 [ ptsf ] yinfoflag = yinfoflag [ ptsf ] yinfoflag2 = yinfoflag2 [ ptsf ] yinfoflag3 = yinfoflag3 [ ptsf ] print ( \"\" ) print ( 'Now filtering the optical data for nan values' ) print ( \"\" ) print ( 'Number of sources in the PANSTARRS data:' , \\ len ( ps1_objid )) print ( \"\" ) indices_only_ifilered = np . where ( imag != - 999 )[ 0 ] binwidth = 0.5 bins = np . arange ( np . min ( imag [ indices_only_ifilered ]), \\ np . max ( imag [ indices_only_ifilered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( imag [ indices_only_ifilered ], bins = bins , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . xlabel ( 'Only $i_ {mag} $ observations' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_only_imag_in_panstarrs_data.png' ) plt . clf () indices_all_filtered = np . where (( gmag != - 999 ) & ( imag != - 999 ) & \\ ( rmag != - 999 ) & ( zmag != - 999 ) & \\ ( ymag != - 999 ) & ( e_gmag != - 999 ) & \\ ( e_rmag != - 999 ) & ( e_imag != - 999 ) & \\ ( e_zmag != - 999 ) & ( e_ymag != - 999 ) & \\ ( gkron != - 999 ) & ( ikron != - 999 ) & \\ ( zkron != - 999 ) & ( ykron != - 999 ) & \\ ( rkron != - 999 ) & ( e_gmag < 0.2 ) & \\ ( e_rmag < 0.2 ) & ( e_imag < 0.2 ) & \\ ( e_zmag < 0.2 ) & ( e_ymag < 0.2 ))[ 0 ] print ( 'Number of sources having detections in five optical bands=' , \\ len ( indices_all_filtered )) binwidth = 0.5 bins_g = np . arange ( np . min ( gmag [ indices_all_filtered ]), \\ np . max ( gmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_r = np . arange ( np . min ( rmag [ indices_all_filtered ]), \\ np . max ( rmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_i = np . arange ( np . min ( imag [ indices_all_filtered ]), \\ np . max ( imag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_z = np . arange ( np . min ( zmag [ indices_all_filtered ]), \\ np . max ( zmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_y = np . arange ( np . min ( ymag [ indices_all_filtered ]), \\ np . max ( ymag [ indices_all_filtered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( gmag [ indices_all_filtered ], bins = bins_g , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$g_ {mag} $' ) plt . hist ( rmag [ indices_all_filtered ], bins = bins_r , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = '$r_ {mag} $' ) plt . hist ( imag [ indices_all_filtered ], bins = bins_i , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . hist ( zmag [ indices_all_filtered ], bins = bins_z , \\ facecolor = 'white' , edgecolor = 'orange' , \\ linestyle = '--' , label = '$z_ {mag} $' ) plt . hist ( ymag [ indices_all_filtered ], bins = bins_y , \\ facecolor = 'white' , edgecolor = 'purple' , \\ linestyle = '--' , label = '$y_ {mag} $' ) plt . xlabel ( 'PANSTARRS observed data' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_panstarrs_data.png' ) plt . clf () raw_optical_data = ps1_objid [ indices_all_filtered ], \\ ps_ra [ indices_all_filtered ], err_ps_ra [ indices_all_filtered ], \\ ps_dec [ indices_all_filtered ], err_ps_dec [ indices_all_filtered ], \\ gmag [ indices_all_filtered ], e_gmag [ indices_all_filtered ], \\ gkron [ indices_all_filtered ], e_gkron [ indices_all_filtered ], \\ rmag [ indices_all_filtered ], e_rmag [ indices_all_filtered ], \\ rkron [ indices_all_filtered ], e_rkron [ indices_all_filtered ], \\ imag [ indices_all_filtered ], e_imag [ indices_all_filtered ], \\ ikron [ indices_all_filtered ], e_ikron [ indices_all_filtered ], \\ zmag [ indices_all_filtered ], e_zmag [ indices_all_filtered ], \\ zkron [ indices_all_filtered ], e_zkron [ indices_all_filtered ], \\ ymag [ indices_all_filtered ], e_ymag [ indices_all_filtered ], \\ ykron [ indices_all_filtered ], e_ykron [ indices_all_filtered ], \\ objinfoflag [ indices_all_filtered ], qualityflag [ indices_all_filtered ], \\ ndetections [ indices_all_filtered ], nstackdetections [ indices_all_filtered ], \\ ginfoflag [ indices_all_filtered ], ginfoflag2 [ indices_all_filtered ], \\ ginfoflag3 [ indices_all_filtered ], rinfoflag [ indices_all_filtered ], \\ rinfoflag2 [ indices_all_filtered ], rinfoflag3 [ indices_all_filtered ], \\ iinfoflag [ indices_all_filtered ], iinfoflag2 [ indices_all_filtered ], \\ iinfoflag3 [ indices_all_filtered ], zinfoflag [ indices_all_filtered ], \\ zinfoflag2 [ indices_all_filtered ], zinfoflag3 [ indices_all_filtered ], \\ yinfoflag [ indices_all_filtered ], yinfoflag2 [ indices_all_filtered ], \\ yinfoflag3 [ indices_all_filtered ] return raw_optical_data def read_nir_data ( self ): \"\"\" Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' print ( 'UKIDSS file name=' , file_name ) file_exists = os . path . exists ( file_name ) print ( \"\" ) print ( 'Does UKIDSS observed NIR data file exist?' , file_exists ) print ( \"\" ) if file_exists is False : print ( 'Validated catalogue does not exist' ) print ( \"\" ) print ( '############################################' ) print ( 'Generating observed UKIDSS NIR data file...' ) print ( \"\" ) self . gd . get_ukidss_data () ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0.0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( np . abs ( e_petro_j ) < 0.2 ) & ( np . abs ( e_petro_h ) < 0.2 ) \\ & ( np . abs ( e_petro_k ) < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . gird () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec elif file_exists is True : print ( \"\" ) print ( 'Reading the validated catalogue file:' + str ( file_name )) print ( \"\" ) ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , \\ len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), np . max ( filtered_petro_j ) + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), np . max ( filtered_petro_h ) + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), np . max ( filtered_petro_k ) + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec return nir_data def read_gaia_data ( self ): \"\"\" Reads the input GAIA DR3 data. The number of columns are 12. \"\"\" header = [ 'source_id' , 'ra' , 'ra_error,dec' , 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , 'pmdec_error' , 'ruwe' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe except FileNotFoundError : self . gd . get_gaia_data () gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , \\ skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe return gaia_data read_gaia_data () Reads the input GAIA DR3 data. The number of columns are 12. Source code in irgsctool/_read_data.py 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 def read_gaia_data ( self ): \"\"\" Reads the input GAIA DR3 data. The number of columns are 12. \"\"\" header = [ 'source_id' , 'ra' , 'ra_error,dec' , 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , 'pmdec_error' , 'ruwe' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe except FileNotFoundError : self . gd . get_gaia_data () gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , \\ skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe return gaia_data read_nir_data () Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. Source code in irgsctool/_read_data.pydef read_nir_data ( self ): \"\"\" Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' print ( 'UKIDSS file name=' , file_name ) file_exists = os . path . exists ( file_name ) print ( \"\" ) print ( 'Does UKIDSS observed NIR data file exist?' , file_exists ) print ( \"\" ) if file_exists is False : print ( 'Validated catalogue does not exist' ) print ( \"\" ) print ( '############################################' ) print ( 'Generating observed UKIDSS NIR data file...' ) print ( \"\" ) self . gd . get_ukidss_data () ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0.0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( np . abs ( e_petro_j ) < 0.2 ) & ( np . abs ( e_petro_h ) < 0.2 ) \\ & ( np . abs ( e_petro_k ) < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . gird () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec elif file_exists is True : print ( \"\" ) print ( 'Reading the validated catalogue file:' + str ( file_name )) print ( \"\" ) ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , \\ len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), np . max ( filtered_petro_j ) + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), np . max ( filtered_petro_h ) + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), np . max ( filtered_petro_k ) + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec return nir_data read_optical_data () Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. Source code in irgsctool/_read_data.pydef read_optical_data ( self ): \"\"\" Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) except FileNotFoundError : self . gd . get_panstarrs_data () ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) ps1_objid = ps1_data [:, 0 ] ps_ra = ps1_data [:, 1 ] err_ps_ra = ps1_data [:, 2 ] ps_dec = ps1_data [:, 3 ] err_ps_dec = ps1_data [:, 4 ] gmag = ps1_data [:, 5 ] e_gmag = ps1_data [:, 6 ] gkron = ps1_data [:, 7 ] e_gkron = ps1_data [:, 8 ] rmag = ps1_data [:, 9 ] e_rmag = ps1_data [:, 10 ] rkron = ps1_data [:, 11 ] e_rkron = ps1_data [:, 12 ] imag = ps1_data [:, 13 ] e_imag = ps1_data [:, 14 ] ikron = ps1_data [:, 15 ] e_ikron = ps1_data [:, 16 ] zmag = ps1_data [:, 17 ] e_zmag = ps1_data [:, 18 ] zkron = ps1_data [:, 19 ] e_zkron = ps1_data [:, 20 ] ymag = ps1_data [:, 21 ] e_ymag = ps1_data [:, 22 ] ykron = ps1_data [:, 23 ] e_ykron = ps1_data [:, 24 ] objinfoflag = ps1_data [:, 25 ] qualityflag = ps1_data [:, 26 ] ndetections = ps1_data [:, 27 ] nstackdetections = ps1_data [:, 28 ] ginfoflag = ps1_data [:, 29 ] ginfoflag2 = ps1_data [:, 30 ] ginfoflag3 = ps1_data [:, 31 ] rinfoflag = ps1_data [:, 32 ] rinfoflag2 = ps1_data [:, 33 ] rinfoflag3 = ps1_data [:, 34 ] iinfoflag = ps1_data [:, 35 ] iinfoflag2 = ps1_data [:, 36 ] iinfoflag3 = ps1_data [:, 37 ] zinfoflag = ps1_data [:, 38 ] zinfoflag2 = ps1_data [:, 39 ] zinfoflag3 = ps1_data [:, 40 ] yinfoflag = ps1_data [:, 41 ] yinfoflag2 = ps1_data [:, 42 ] yinfoflag3 = ps1_data [:, 43 ] ps1_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gmag , \\ e_gmag , gkron , e_gkron , rmag , e_rmag , rkron , e_rkron , imag , \\ e_imag , ikron , e_ikron , zmag , e_zmag , zkron , e_zkron , ymag , \\ e_ymag , ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , \\ yinfoflag3 print ( 'Number of rows in the PANSTARRS file:' , \\ len ( ps1_objid )) oid1 = np . array ([ list ( set ( ps1_objid ))])[ 0 ] oid1 = [ * set ( ps1_objid )] ptsf = [] for i in range ( len ( oid1 )): ptsi = np . where ( oid1 [ i ] == ps1_objid )[ 0 ] if len ( ptsi ) > 1.0 : ptsi = ptsi [ 0 ] ptsf = np . append ( ptsf , ptsi ) ptsf = np . int64 ( ptsf ) else : ptsf = np . append ( ptsf , ptsi ) ps1_objid = ps1_objid [ ptsf ] ps_ra = ps_ra [ ptsf ] ps_dec = ps_dec [ ptsf ] err_ps_ra = err_ps_ra [ ptsf ] err_ps_dec = err_ps_dec [ ptsf ] gmag = gmag [ ptsf ] gkron = gkron [ ptsf ] e_gmag = e_gmag [ ptsf ] e_gkron = e_gkron [ ptsf ] rmag = rmag [ ptsf ] rkron = rkron [ ptsf ] e_rmag = e_rmag [ ptsf ] e_rkron = e_rkron [ ptsf ] imag = imag [ ptsf ] ikron = ikron [ ptsf ] e_imag = e_imag [ ptsf ] e_ikron = e_ikron [ ptsf ] zmag = zmag [ ptsf ] zkron = zkron [ ptsf ] e_zmag = e_zmag [ ptsf ] e_zkron = e_zkron [ ptsf ] ymag = ymag [ ptsf ] ykron = ykron [ ptsf ] e_ymag = e_ymag [ ptsf ] e_ykron = e_ykron [ ptsf ] objinfoflag = objinfoflag [ ptsf ] qualityflag = qualityflag [ ptsf ] ndetections = ndetections [ ptsf ] nstackdetections = nstackdetections [ ptsf ] ginfoflag = ginfoflag [ ptsf ] ginfoflag2 = ginfoflag2 [ ptsf ] ginfoflag3 = ginfoflag3 [ ptsf ] rinfoflag = rinfoflag [ ptsf ] rinfoflag2 = rinfoflag2 [ ptsf ] rinfoflag3 = rinfoflag3 [ ptsf ] iinfoflag = iinfoflag [ ptsf ] iinfoflag2 = iinfoflag2 [ ptsf ] iinfoflag3 = iinfoflag3 [ ptsf ] zinfoflag = zinfoflag [ ptsf ] zinfoflag2 = zinfoflag2 [ ptsf ] zinfoflag3 = zinfoflag3 [ ptsf ] yinfoflag = yinfoflag [ ptsf ] yinfoflag2 = yinfoflag2 [ ptsf ] yinfoflag3 = yinfoflag3 [ ptsf ] print ( \"\" ) print ( 'Now filtering the optical data for nan values' ) print ( \"\" ) print ( 'Number of sources in the PANSTARRS data:' , \\ len ( ps1_objid )) print ( \"\" ) indices_only_ifilered = np . where ( imag != - 999 )[ 0 ] binwidth = 0.5 bins = np . arange ( np . min ( imag [ indices_only_ifilered ]), \\ np . max ( imag [ indices_only_ifilered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( imag [ indices_only_ifilered ], bins = bins , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . xlabel ( 'Only $i_ {mag} $ observations' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_only_imag_in_panstarrs_data.png' ) plt . clf () indices_all_filtered = np . where (( gmag != - 999 ) & ( imag != - 999 ) & \\ ( rmag != - 999 ) & ( zmag != - 999 ) & \\ ( ymag != - 999 ) & ( e_gmag != - 999 ) & \\ ( e_rmag != - 999 ) & ( e_imag != - 999 ) & \\ ( e_zmag != - 999 ) & ( e_ymag != - 999 ) & \\ ( gkron != - 999 ) & ( ikron != - 999 ) & \\ ( zkron != - 999 ) & ( ykron != - 999 ) & \\ ( rkron != - 999 ) & ( e_gmag < 0.2 ) & \\ ( e_rmag < 0.2 ) & ( e_imag < 0.2 ) & \\ ( e_zmag < 0.2 ) & ( e_ymag < 0.2 ))[ 0 ] print ( 'Number of sources having detections in five optical bands=' , \\ len ( indices_all_filtered )) binwidth = 0.5 bins_g = np . arange ( np . min ( gmag [ indices_all_filtered ]), \\ np . max ( gmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_r = np . arange ( np . min ( rmag [ indices_all_filtered ]), \\ np . max ( rmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_i = np . arange ( np . min ( imag [ indices_all_filtered ]), \\ np . max ( imag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_z = np . arange ( np . min ( zmag [ indices_all_filtered ]), \\ np . max ( zmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_y = np . arange ( np . min ( ymag [ indices_all_filtered ]), \\ np . max ( ymag [ indices_all_filtered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( gmag [ indices_all_filtered ], bins = bins_g , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$g_ {mag} $' ) plt . hist ( rmag [ indices_all_filtered ], bins = bins_r , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = '$r_ {mag} $' ) plt . hist ( imag [ indices_all_filtered ], bins = bins_i , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . hist ( zmag [ indices_all_filtered ], bins = bins_z , \\ facecolor = 'white' , edgecolor = 'orange' , \\ linestyle = '--' , label = '$z_ {mag} $' ) plt . hist ( ymag [ indices_all_filtered ], bins = bins_y , \\ facecolor = 'white' , edgecolor = 'purple' , \\ linestyle = '--' , label = '$y_ {mag} $' ) plt . xlabel ( 'PANSTARRS observed data' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_panstarrs_data.png' ) plt . clf () raw_optical_data = ps1_objid [ indices_all_filtered ], \\ ps_ra [ indices_all_filtered ], err_ps_ra [ indices_all_filtered ], \\ ps_dec [ indices_all_filtered ], err_ps_dec [ indices_all_filtered ], \\ gmag [ indices_all_filtered ], e_gmag [ indices_all_filtered ], \\ gkron [ indices_all_filtered ], e_gkron [ indices_all_filtered ], \\ rmag [ indices_all_filtered ], e_rmag [ indices_all_filtered ], \\ rkron [ indices_all_filtered ], e_rkron [ indices_all_filtered ], \\ imag [ indices_all_filtered ], e_imag [ indices_all_filtered ], \\ ikron [ indices_all_filtered ], e_ikron [ indices_all_filtered ], \\ zmag [ indices_all_filtered ], e_zmag [ indices_all_filtered ], \\ zkron [ indices_all_filtered ], e_zkron [ indices_all_filtered ], \\ ymag [ indices_all_filtered ], e_ymag [ indices_all_filtered ], \\ ykron [ indices_all_filtered ], e_ykron [ indices_all_filtered ], \\ objinfoflag [ indices_all_filtered ], qualityflag [ indices_all_filtered ], \\ ndetections [ indices_all_filtered ], nstackdetections [ indices_all_filtered ], \\ ginfoflag [ indices_all_filtered ], ginfoflag2 [ indices_all_filtered ], \\ ginfoflag3 [ indices_all_filtered ], rinfoflag [ indices_all_filtered ], \\ rinfoflag2 [ indices_all_filtered ], rinfoflag3 [ indices_all_filtered ], \\ iinfoflag [ indices_all_filtered ], iinfoflag2 [ indices_all_filtered ], \\ iinfoflag3 [ indices_all_filtered ], zinfoflag [ indices_all_filtered ], \\ zinfoflag2 [ indices_all_filtered ], zinfoflag3 [ indices_all_filtered ], \\ yinfoflag [ indices_all_filtered ], yinfoflag2 [ indices_all_filtered ], \\ yinfoflag3 [ indices_all_filtered ] return raw_optical_data StarGalaxyClassification Class contains star_galaxy_classification() object which is used to seperate the stars and galaxies in the PANSTARRS optical data. Source code in irgsctool/_sgc.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class StarGalaxyClassification (): \"\"\" Class contains star_galaxy_classification() object which is used to seperate the stars and galaxies in the PANSTARRS optical data. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def star_galaxy_classification ( self ): \"\"\" Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. \"\"\" print ( \"\" ) print ( \"#######################################################################\" ) print ( 'Seperating Stars and Galaxies from the input optical PANSTARRS dataset' ) print ( \"\" ) print ( \"#######################################################################\" ) ps_phot = self . rd . read_optical_data () print ( \"\" ) print ( 'Using psf-kron criteria to seperate stars and galaxies' ) print ( \"\" ) ps1_objid , ps_ra , e_ps_ra , ps_dec , e_ps_dec , gpsf , e_gpsf , gkron , e_gkron , rpsf , e_rpsf , rkron , e_rkron , \\ ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , \\ objinfoflag , qualityflag , ndetections , nstackdetections , ginfoflag , ginfoflag2 , \\ ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot print ( 'Length of the PS1 data before SGC is:' , len ( ps1_objid )) print ( '' ) sgc_index = np . where (( gpsf - gkron < 0.05 ) & ( rpsf - rkron < 0.05 ) & ( ipsf - ikron < 0.05 ) & \\ ( zpsf - zkron < 0.05 ) & ( ypsf - ykron < 0.05 ))[ 0 ] galaxy_index = np . where (( gpsf - gkron > 0.05 ) & ( rpsf - rkron > 0.05 ) & ( ipsf - ikron > 0.05 ) & \\ ( zpsf - zkron > 0.05 ) & ( ypsf - ykron > 0.05 ))[ 0 ] print ( 'Number of probable stellar sources =' + ' ' + str ( len ( sgc_index )) + ' ' + 'and number of extended sources = ' + str ( len ( ipsf ) - len ( sgc_index ))) print ( \"\" ) print ( 'Now plotting the (g-r) vs (r-i) CCD which shows stars in a locus and galaxies as random respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter (( gpsf [ sgc_index ] - rpsf [ sgc_index ]), ( rpsf [ sgc_index ] - ipsf [ sgc_index ]), \\ s = 5 , color = 'm' , alpha = 0.3 , label = 'stellar sources' ) plt . scatter (( gpsf [ galaxy_index ] - rpsf [ galaxy_index ]), ( rpsf [ galaxy_index ] - ipsf [ galaxy_index ]), \\ s = 5 , color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$(g-r)$' ) plt . ylabel ( '$(r-i)$' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'ccd_stars_and_galaxies_seperated.png' ) plt . clf () print ( 'Plotting the (ipsf-ikron) vs (ikron) scatter plot which shows stars and galaxies as magenta and black points respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter ( ipsf [ sgc_index ], ( ipsf [ sgc_index ] - ikron [ sgc_index ]), s = 5 , color = 'm' , alpha = 0.3 , \\ label = 'stellar sources' ) plt . scatter ( ipsf [ galaxy_index ], ( ipsf [ galaxy_index ] - ikron [ galaxy_index ]), s = 5 , \\ color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$i_ {psf} $' ) plt . ylabel ( '$i_ {psf} -i_ {kron} $' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'psf_vs_kron_stars_and_galaxies_seperated.png' ) plt . clf () ps_phot = ps1_objid [ sgc_index ], ps_ra [ sgc_index ], e_ps_ra [ sgc_index ], ps_dec [ sgc_index ], \\ e_ps_dec [ sgc_index ], gpsf [ sgc_index ], e_gpsf [ sgc_index ], gkron [ sgc_index ], e_gkron [ sgc_index ], \\ rpsf [ sgc_index ], e_rpsf [ sgc_index ], rkron [ sgc_index ], e_rkron [ sgc_index ], ipsf [ sgc_index ], \\ e_ipsf [ sgc_index ], ikron [ sgc_index ], e_ikron [ sgc_index ], zpsf [ sgc_index ], e_zpsf [ sgc_index ], \\ zkron [ sgc_index ], e_zkron [ sgc_index ], ypsf [ sgc_index ], e_ypsf [ sgc_index ], ykron [ sgc_index ], \\ e_ykron [ sgc_index ], objinfoflag [ sgc_index ], qualityflag [ sgc_index ], ndetections [ sgc_index ], \\ nstackdetections [ sgc_index ], ginfoflag [ sgc_index ], ginfoflag2 [ sgc_index ], \\ ginfoflag3 [ sgc_index ], rinfoflag [ sgc_index ], rinfoflag2 [ sgc_index ], rinfoflag3 [ sgc_index ], \\ iinfoflag [ sgc_index ], iinfoflag2 [ sgc_index ], iinfoflag3 [ sgc_index ], \\ zinfoflag [ sgc_index ], zinfoflag2 [ sgc_index ], zinfoflag3 [ sgc_index ], \\ yinfoflag [ sgc_index ], yinfoflag2 [ sgc_index ], yinfoflag3 [ sgc_index ] print ( \"#####################################################\" ) print ( 'Created an input optical catalogue of stellar sources' ) print ( \"######################################################\" ) print ( 'Length of PS1 data before sgc is:' , len ( ps1_objid [ sgc_index ])) return ps_phot star_galaxy_classification () Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. Source code in irgsctool/_sgc.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def star_galaxy_classification ( self ): \"\"\" Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. \"\"\" print ( \"\" ) print ( \"#######################################################################\" ) print ( 'Seperating Stars and Galaxies from the input optical PANSTARRS dataset' ) print ( \"\" ) print ( \"#######################################################################\" ) ps_phot = self . rd . read_optical_data () print ( \"\" ) print ( 'Using psf-kron criteria to seperate stars and galaxies' ) print ( \"\" ) ps1_objid , ps_ra , e_ps_ra , ps_dec , e_ps_dec , gpsf , e_gpsf , gkron , e_gkron , rpsf , e_rpsf , rkron , e_rkron , \\ ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , \\ objinfoflag , qualityflag , ndetections , nstackdetections , ginfoflag , ginfoflag2 , \\ ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot print ( 'Length of the PS1 data before SGC is:' , len ( ps1_objid )) print ( '' ) sgc_index = np . where (( gpsf - gkron < 0.05 ) & ( rpsf - rkron < 0.05 ) & ( ipsf - ikron < 0.05 ) & \\ ( zpsf - zkron < 0.05 ) & ( ypsf - ykron < 0.05 ))[ 0 ] galaxy_index = np . where (( gpsf - gkron > 0.05 ) & ( rpsf - rkron > 0.05 ) & ( ipsf - ikron > 0.05 ) & \\ ( zpsf - zkron > 0.05 ) & ( ypsf - ykron > 0.05 ))[ 0 ] print ( 'Number of probable stellar sources =' + ' ' + str ( len ( sgc_index )) + ' ' + 'and number of extended sources = ' + str ( len ( ipsf ) - len ( sgc_index ))) print ( \"\" ) print ( 'Now plotting the (g-r) vs (r-i) CCD which shows stars in a locus and galaxies as random respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter (( gpsf [ sgc_index ] - rpsf [ sgc_index ]), ( rpsf [ sgc_index ] - ipsf [ sgc_index ]), \\ s = 5 , color = 'm' , alpha = 0.3 , label = 'stellar sources' ) plt . scatter (( gpsf [ galaxy_index ] - rpsf [ galaxy_index ]), ( rpsf [ galaxy_index ] - ipsf [ galaxy_index ]), \\ s = 5 , color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$(g-r)$' ) plt . ylabel ( '$(r-i)$' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'ccd_stars_and_galaxies_seperated.png' ) plt . clf () print ( 'Plotting the (ipsf-ikron) vs (ikron) scatter plot which shows stars and galaxies as magenta and black points respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter ( ipsf [ sgc_index ], ( ipsf [ sgc_index ] - ikron [ sgc_index ]), s = 5 , color = 'm' , alpha = 0.3 , \\ label = 'stellar sources' ) plt . scatter ( ipsf [ galaxy_index ], ( ipsf [ galaxy_index ] - ikron [ galaxy_index ]), s = 5 , \\ color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$i_ {psf} $' ) plt . ylabel ( '$i_ {psf} -i_ {kron} $' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'psf_vs_kron_stars_and_galaxies_seperated.png' ) plt . clf () ps_phot = ps1_objid [ sgc_index ], ps_ra [ sgc_index ], e_ps_ra [ sgc_index ], ps_dec [ sgc_index ], \\ e_ps_dec [ sgc_index ], gpsf [ sgc_index ], e_gpsf [ sgc_index ], gkron [ sgc_index ], e_gkron [ sgc_index ], \\ rpsf [ sgc_index ], e_rpsf [ sgc_index ], rkron [ sgc_index ], e_rkron [ sgc_index ], ipsf [ sgc_index ], \\ e_ipsf [ sgc_index ], ikron [ sgc_index ], e_ikron [ sgc_index ], zpsf [ sgc_index ], e_zpsf [ sgc_index ], \\ zkron [ sgc_index ], e_zkron [ sgc_index ], ypsf [ sgc_index ], e_ypsf [ sgc_index ], ykron [ sgc_index ], \\ e_ykron [ sgc_index ], objinfoflag [ sgc_index ], qualityflag [ sgc_index ], ndetections [ sgc_index ], \\ nstackdetections [ sgc_index ], ginfoflag [ sgc_index ], ginfoflag2 [ sgc_index ], \\ ginfoflag3 [ sgc_index ], rinfoflag [ sgc_index ], rinfoflag2 [ sgc_index ], rinfoflag3 [ sgc_index ], \\ iinfoflag [ sgc_index ], iinfoflag2 [ sgc_index ], iinfoflag3 [ sgc_index ], \\ zinfoflag [ sgc_index ], zinfoflag2 [ sgc_index ], zinfoflag3 [ sgc_index ], \\ yinfoflag [ sgc_index ], yinfoflag2 [ sgc_index ], yinfoflag3 [ sgc_index ] print ( \"#####################################################\" ) print ( 'Created an input optical catalogue of stellar sources' ) print ( \"######################################################\" ) print ( 'Length of PS1 data before sgc is:' , len ( ps1_objid [ sgc_index ])) return ps_phot Module to generate extinction corrected photometry. This model is dependant on dustmaps package and makes use of dustmaps.sfd ExtinctionCorrection This module has two functions: 1. 'get_reddening': which uses \"dustmaps\" python package to obtain the Schegel et.al. 1998 reddening map. This value of reddening is converted to Schafly & Finkbeiner 2011 value by scaling the original value by 0.86. aj, ah and ak are then comnputed by assuming the reddening law constant in J, H and K bands. 2. 'extinction_corrected_photometry': which computes the optical extinction in PANSTARRS bands by using the relations given by Tonry et.al. 2012. It returns extinction and reddening corrected PANSTARRS photometry. Source code in irgsctool/_extinction_correction.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class ExtinctionCorrection (): \"\"\" This module has two functions: 1. 'get_reddening': which uses \"dustmaps\" python package to obtain the Schegel et.al. 1998 reddening map. This value of reddening is converted to Schafly & Finkbeiner 2011 value by scaling the original value by 0.86. aj, ah and ak are then comnputed by assuming the reddening law constant in J, H and K bands. 2. 'extinction_corrected_photometry': which computes the optical extinction in PANSTARRS bands by using the relations given by Tonry et.al. 2012. It returns extinction and reddening corrected PANSTARRS photometry. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . sgc = sgc ( ra , dec ) def get_reddening ( self ): \"\"\" Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd \"\"\" try : coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv except FileNotFoundError : dustmaps . sfd . fetch () coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv return snf_ebv , err_snf_ebv , aj , ah , ak def extinction_corrected_photometry ( self ): \"\"\" Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. \"\"\" print ( \"########################################\" ) print ( \"\" ) print ( 'Correcting the optical photometry of the probable stellar sources for extinction.' ) print ( \"\" ) print ( \"########################################\" ) print ( \"\" ) ebv , err_ebv , _ , _ , _ = self . get_reddening () ps_phot = self . sgc . star_galaxy_classification () print ( '' ) print ( 'Length of PS1 data before ec is:' , len ( ps_phot [ 0 ])) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gpsf , e_gpsf , gkron , e_gkron , \\ rpsf , e_rpsf , rkron , e_rkron , ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , \\ zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot #extinction in ps1 filters taken from Tonry et.al. 2012 ag = ( ebv ) * 0.88 * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.01 * ( gpsf - ipsf ) ** 2 ) ar = ( ebv ) * 0.88 * ( 2.585 - 0.0315 * ( gpsf - ipsf )) ai = ( ebv ) * 0.88 * ( 1.908 - 0.0152 * ( gpsf - ipsf )) az = ( ebv ) * 0.88 * ( 1.499 - 0.0023 * ( gpsf - ipsf )) ay = ( ebv ) * 0.88 * ( 1.251 - 0.0027 * ( gpsf - ipsf )) e_gi = np . sqrt ( e_gpsf ** 2 + e_ipsf ** 2 ) #error in extinction e_ag = (( err_ebv ) * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.02 * ( gpsf - ipsf ) ** 2 )) + \\ (( ebv ) * (( - 0.0972 * e_gi ) + ( 0.02 * ( gpsf - ipsf ) * e_gi ))) e_ar = ( err_ebv ) * ( 2.585 - 0.0315 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0315 * e_gi ) e_ai = ( err_ebv ) * ( 1.908 - 0.0152 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0152 * e_gi ) e_az = ( err_ebv ) * ( 1.499 - 0.0023 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0023 * e_gi ) e_ay = ( err_ebv ) * ( 1.251 - 0.0027 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0027 * e_gi ) #\"ec_\" stands for extinction corrected magnitudes ec_gmag = gpsf - ag ec_rmag = rpsf - ar ec_imag = ipsf - ai ec_zmag = zpsf - az ec_ymag = ypsf - ay #e_ec_ stands for error in extinction corrected magnitudes e_ec_gmag = np . sqrt (( e_gpsf ) ** 2 + ( e_ag ) ** 2 ) e_ec_rmag = np . sqrt (( e_rpsf ) ** 2 + ( e_ar ) ** 2 ) e_ec_imag = np . sqrt (( e_ipsf ) ** 2 + ( e_ai ) ** 2 ) e_ec_zmag = np . sqrt (( e_zpsf ) ** 2 + ( e_az ) ** 2 ) e_ec_ymag = np . sqrt (( e_ypsf ) ** 2 + ( e_ay ) ** 2 ) psf_phot = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , \\ ec_gmag , e_ec_gmag , gkron , e_gkron , ec_rmag , e_ec_rmag , \\ rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , \\ ec_zmag , e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , \\ ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , \\ rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , \\ iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , \\ yinfoflag2 , yinfoflag3 print ( 'length of ps1 data after ec is:' , len ( psf_phot [ 0 ])) return psf_phot extinction_corrected_photometry () Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. Source code in irgsctool/_extinction_correction.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def extinction_corrected_photometry ( self ): \"\"\" Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. \"\"\" print ( \"########################################\" ) print ( \"\" ) print ( 'Correcting the optical photometry of the probable stellar sources for extinction.' ) print ( \"\" ) print ( \"########################################\" ) print ( \"\" ) ebv , err_ebv , _ , _ , _ = self . get_reddening () ps_phot = self . sgc . star_galaxy_classification () print ( '' ) print ( 'Length of PS1 data before ec is:' , len ( ps_phot [ 0 ])) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gpsf , e_gpsf , gkron , e_gkron , \\ rpsf , e_rpsf , rkron , e_rkron , ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , \\ zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot #extinction in ps1 filters taken from Tonry et.al. 2012 ag = ( ebv ) * 0.88 * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.01 * ( gpsf - ipsf ) ** 2 ) ar = ( ebv ) * 0.88 * ( 2.585 - 0.0315 * ( gpsf - ipsf )) ai = ( ebv ) * 0.88 * ( 1.908 - 0.0152 * ( gpsf - ipsf )) az = ( ebv ) * 0.88 * ( 1.499 - 0.0023 * ( gpsf - ipsf )) ay = ( ebv ) * 0.88 * ( 1.251 - 0.0027 * ( gpsf - ipsf )) e_gi = np . sqrt ( e_gpsf ** 2 + e_ipsf ** 2 ) #error in extinction e_ag = (( err_ebv ) * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.02 * ( gpsf - ipsf ) ** 2 )) + \\ (( ebv ) * (( - 0.0972 * e_gi ) + ( 0.02 * ( gpsf - ipsf ) * e_gi ))) e_ar = ( err_ebv ) * ( 2.585 - 0.0315 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0315 * e_gi ) e_ai = ( err_ebv ) * ( 1.908 - 0.0152 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0152 * e_gi ) e_az = ( err_ebv ) * ( 1.499 - 0.0023 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0023 * e_gi ) e_ay = ( err_ebv ) * ( 1.251 - 0.0027 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0027 * e_gi ) #\"ec_\" stands for extinction corrected magnitudes ec_gmag = gpsf - ag ec_rmag = rpsf - ar ec_imag = ipsf - ai ec_zmag = zpsf - az ec_ymag = ypsf - ay #e_ec_ stands for error in extinction corrected magnitudes e_ec_gmag = np . sqrt (( e_gpsf ) ** 2 + ( e_ag ) ** 2 ) e_ec_rmag = np . sqrt (( e_rpsf ) ** 2 + ( e_ar ) ** 2 ) e_ec_imag = np . sqrt (( e_ipsf ) ** 2 + ( e_ai ) ** 2 ) e_ec_zmag = np . sqrt (( e_zpsf ) ** 2 + ( e_az ) ** 2 ) e_ec_ymag = np . sqrt (( e_ypsf ) ** 2 + ( e_ay ) ** 2 ) psf_phot = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , \\ ec_gmag , e_ec_gmag , gkron , e_gkron , ec_rmag , e_ec_rmag , \\ rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , \\ ec_zmag , e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , \\ ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , \\ rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , \\ iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , \\ yinfoflag2 , yinfoflag3 print ( 'length of ps1 data after ec is:' , len ( psf_phot [ 0 ])) return psf_phot get_reddening () Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd Source code in irgsctool/_extinction_correction.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get_reddening ( self ): \"\"\" Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd \"\"\" try : coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv except FileNotFoundError : dustmaps . sfd . fetch () coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv return snf_ebv , err_snf_ebv , aj , ah , ak Models Models child class reads and selects the required Kurucz and Phoenix stellar atmospheric models in the generation of IRGSC. Source code in irgsctool/_sam.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Models (): \"\"\" ***Models*** child class reads and selects the required Kurucz and Phoenix stellar atmospheric models in the generation of IRGSC. \"\"\" def __init__ ( self , use_sam = None ): self . sam = use_sam def read_sam_file ( self , use_sam = None ): \"\"\" ***irgsctool.Models.read_sam_file***(use_sam=None) <justify> This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Raises: ValueError if use_sam is None. FileNotFoundError if the model files are not found.</justify> \"\"\" if self . sam == None : raise ValueError ( 'Input not given on which Stellar \\ Atmospheric Models to be used' ) elif self . sam == 'Kurucz' : print ( \"\" ) print ( 'Reading Interpolated Kurucz SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_kurucz.txt' ) except : FileNotFoundError ( 'interpolated_kurucz.txt file not found' ) elif self . sam == 'Phoenix' : print ( \"\" ) print ( 'Reading Interpolated Phoenix SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_phoenix.txt' ) except : FileNotFoundError ( 'interpolated_phoenix.txt not found' ) teff = p2 [:, 0 ] logg = p2 [:, 2 ] feh = p2 [:, 1 ] sam_g = p2 [:, 3 ] sam_r = p2 [:, 4 ] sam_i = p2 [:, 5 ] sam_z = p2 [:, 6 ] sam_y = p2 [:, 7 ] sam_j = p2 [:, 8 ] sam_h = p2 [:, 9 ] sam_k = p2 [:, 10 ] sam_params = teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k self . sam_params = sam_params return sam_params def select_sam_range ( self , teff_range = None , logg_range = None , feh_range = None , use_optimal_method = False ): \"\"\" *** irgsctool.Models.select_sam_range ***(teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) <justify> This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given.</justify> <justify> If *** use_optimal_method *** is set to True, the following range of models is selected:</justify> | Model Name | \\(T_{eff}\\) (K) | log(g) (dex) | [Fe/H] (dex)| | :-------------| :-------------------------| :----------------| :--------------| | Phoenix (C1) | 2800 - 5000 | 3.0 - 5.5 | -5.0 - -1.5| | Phoenix (C2) | 2800 - 4000 | 0.0 - 3.0 | -0.5 - 1.5 | | KuruczCastelli-Kurucz (K0) | 4000 - 10000 | --- | --- | \"\"\" teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k \\ = self . sam_params if use_optimal_method is True : if teff_range is None and logg_range is None and feh_range is None : raise TypeError ( \"Parameter range must be provided in order to use \\ the optimal method\" ) elif teff_range is not None and feh_range is not None and logg_range is not None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ]; \\ logg_lower_limit = logg_range [ 0 ]; logg_upper_limit = logg_range [ - 1 ]; \\ feh_lower_limit = feh_range [ 0 ]; feh_upper_limit = feh_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ) \\ & ( feh > feh_lower_limit ) & ( feh < feh_upper_limit ) \\ & ( logg > logg_lower_limit ) & ( logg < logg_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] elif teff_range is not None and feh_range is None and logg_range is None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] self . selected_params = sam_params return sam_params read_sam_file ( use_sam = None ) irgsctool.Models.read_sam_file (use_sam=None) This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Source code in irgsctool/_sam.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def read_sam_file ( self , use_sam = None ): \"\"\" ***irgsctool.Models.read_sam_file***(use_sam=None) <justify> This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Raises: ValueError if use_sam is None. FileNotFoundError if the model files are not found.</justify> \"\"\" if self . sam == None : raise ValueError ( 'Input not given on which Stellar \\ Atmospheric Models to be used' ) elif self . sam == 'Kurucz' : print ( \"\" ) print ( 'Reading Interpolated Kurucz SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_kurucz.txt' ) except : FileNotFoundError ( 'interpolated_kurucz.txt file not found' ) elif self . sam == 'Phoenix' : print ( \"\" ) print ( 'Reading Interpolated Phoenix SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_phoenix.txt' ) except : FileNotFoundError ( 'interpolated_phoenix.txt not found' ) teff = p2 [:, 0 ] logg = p2 [:, 2 ] feh = p2 [:, 1 ] sam_g = p2 [:, 3 ] sam_r = p2 [:, 4 ] sam_i = p2 [:, 5 ] sam_z = p2 [:, 6 ] sam_y = p2 [:, 7 ] sam_j = p2 [:, 8 ] sam_h = p2 [:, 9 ] sam_k = p2 [:, 10 ] sam_params = teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k self . sam_params = sam_params return sam_params select_sam_range ( teff_range = None , logg_range = None , feh_range = None , use_optimal_method = False ) irgsctool.Models.select_sam_range (teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given. If use_optimal_method is set to True, the following range of models is selected: Model Name \\(T_{eff}\\) (K) log(g) (dex) [Fe/H] (dex) Phoenix (C1) 2800 - 5000 3.0 - 5.5 -5.0 - -1.5 Phoenix (C2) 2800 - 4000 0.0 - 3.0 -0.5 - 1.5 KuruczCastelli-Kurucz (K0) 4000 - 10000 --- --- Source code in irgsctool/_sam.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def select_sam_range ( self , teff_range = None , logg_range = None , feh_range = None , use_optimal_method = False ): \"\"\" *** irgsctool.Models.select_sam_range ***(teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) <justify> This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given.</justify> <justify> If *** use_optimal_method *** is set to True, the following range of models is selected:</justify> | Model Name | \\(T_{eff}\\) (K) | log(g) (dex) | [Fe/H] (dex)| | :-------------| :-------------------------| :----------------| :--------------| | Phoenix (C1) | 2800 - 5000 | 3.0 - 5.5 | -5.0 - -1.5| | Phoenix (C2) | 2800 - 4000 | 0.0 - 3.0 | -0.5 - 1.5 | | KuruczCastelli-Kurucz (K0) | 4000 - 10000 | --- | --- | \"\"\" teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k \\ = self . sam_params if use_optimal_method is True : if teff_range is None and logg_range is None and feh_range is None : raise TypeError ( \"Parameter range must be provided in order to use \\ the optimal method\" ) elif teff_range is not None and feh_range is not None and logg_range is not None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ]; \\ logg_lower_limit = logg_range [ 0 ]; logg_upper_limit = logg_range [ - 1 ]; \\ feh_lower_limit = feh_range [ 0 ]; feh_upper_limit = feh_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ) \\ & ( feh > feh_lower_limit ) & ( feh < feh_upper_limit ) \\ & ( logg > logg_lower_limit ) & ( logg < logg_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] elif teff_range is not None and feh_range is None and logg_range is None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] self . selected_params = sam_params return sam_params GenerateIRGSC The GenerateIRGSC class hosts functions to generates a catalog of probable stellar sources in the PANSTARRS data with their computed magnitudes, astrometric information from GAIA DR3 data, best fitted model parameters and flags. Source code in irgsctool/_fitting.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 class GenerateIRGSC (): \"\"\" <justify> The <strong> GenerateIRGSC class </strong> hosts functions to generates a catalog of probable stellar sources in the PANSTARRS data with their computed magnitudes, astrometric information from GAIA DR3 data, best fitted model parameters and flags.</justify> \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) self . ec = EC ( ra , dec ) def generate_irgsc ( self , use_optimal_method = True ): \"\"\" `irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True)` <justify> This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). $$ ES = \\\\frac{\\\\int{F_{\\\\lambda}P_{\\\\lambda}{\\\\lambda} d{\\\\lambda}}}{\\\\int{P_{\\\\lambda}{\\\\lambda}d{\\\\lambda}}} $$ The spectra is obtained from pysynphot [More information here](https://pysynphot.readthedocs.io) The model parameters are: $T_{eff}$, log(g) and [Fe/H].</justify> \"\"\" if use_optimal_method is True : print ( \"\" ) print ( '#########################################' ) print ( 'Computing the NIR magnitudes for the sources using the optimal method' ) print ( '#########################################' ) print ( \"\" ) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , gkron , e_gkron , \\ ec_rmag , e_ec_rmag , rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , ec_zmag , \\ e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , \\ yinfoflag , yinfoflag2 , yinfoflag3 = self . ec . extinction_corrected_photometry () _ , _ , aj , ah , ak = self . ec . get_reddening () gaia_data = self . rd . read_gaia_data () gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe = gaia_data k0 = Models ( 'Kurucz' ) k0 . read_sam_file () c1 = Models ( 'Phoenix' ) c1 . read_sam_file () c2 = Models ( 'Phoenix' ) c2 . read_sam_file () model_params_k0 = k0 . select_sam ( teff_range = [ 4000 , 10000 ], logg_range = None , feh_range = None , use_optimal_method = True ) model_params_c1 = c1 . select_sam ( teff_range = [ 2800 , 5000 ], logg_range = [ 3.0 , 5.5 ], feh_range = [ - 5.0 , - 1.5 ], use_optimal_method = True ) model_params_c2 = c2 . select_sam ( teff_range = [ 2800 , 4000 ], logg_range = [ 0.0 , 3.0 ], feh_range = [ - 0.5 , 1.5 ], use_optimal_method = True ) teff_c1 , logg_c1 , feh_c1 , sam_g_c1 , sam_r_c1 , sam_i_c1 , sam_z_c1 , sam_y_c1 , sam_j_c1 , \\ sam_h_c1 , sam_k_c1 = model_params_c1 teff_c2 , logg_c2 , feh_c2 , sam_g_c2 , sam_r_c2 , sam_i_c2 , sam_z_c2 , sam_y_c2 , sam_j_c2 , \\ sam_h_c2 , sam_k_c2 = model_params_c2 teff_k0 , logg_k0 , feh_k0 , sam_g_k0 , sam_r_k0 , sam_i_k0 , sam_z_k0 , sam_y_k0 , sam_j_k0 , \\ sam_h_k0 , sam_k_k0 = model_params_k0 teff = np . concatenate (( teff_c1 , teff_c2 , teff_k0 ), axis = 0 ) logg = np . concatenate (( logg_c1 , logg_c2 , logg_k0 ), axis = 0 ) feh = np . concatenate (( feh_c1 , feh_c2 , feh_k0 ), axis = 0 ) sam_g = np . concatenate (( sam_g_c1 , sam_g_c2 , sam_g_k0 ), axis = 0 ) sam_r = np . concatenate (( sam_r_c1 , sam_r_c2 , sam_r_k0 ), axis = 0 ) sam_i = np . concatenate (( sam_i_c1 , sam_i_c2 , sam_i_k0 ), axis = 0 ) sam_z = np . concatenate (( sam_z_c1 , sam_z_c2 , sam_z_k0 ), axis = 0 ) sam_y = np . concatenate (( sam_y_c1 , sam_y_c2 , sam_y_k0 ), axis = 0 ) sam_j = np . concatenate (( sam_j_c1 , sam_j_c2 , sam_j_k0 ), axis = 0 ) sam_h = np . concatenate (( sam_h_c1 , sam_h_c2 , sam_h_k0 ), axis = 0 ) sam_k = np . concatenate (( sam_k_c1 , sam_k_c2 , sam_k_k0 ), axis = 0 ) sam_gr = sam_g - sam_r sam_ri = sam_r - sam_i sam_gi = sam_g - sam_i sam_gz = sam_g - sam_z sam_gy = sam_g - sam_y sam_ry = sam_r - sam_y sam_rz = sam_r - sam_z sam_iz = sam_i - sam_z sam_iy = sam_i - sam_y sam_zy = sam_z - sam_y observed_colours = ( ec_gmag - ec_rmag ), ( ec_gmag - ec_imag ), \\ ( ec_gmag - ec_rmag ), ( ec_gmag - ec_ymag ), ( ec_rmag - ec_imag ), \\ ( ec_rmag - ec_ymag ), ( ec_rmag - ec_zmag ), ( ec_imag - ec_zmag ), \\ ( ec_imag - ec_ymag ), ( ec_zmag - ec_ymag ) model_colours = sam_gr , sam_gi , sam_gz , sam_gy , sam_ri , sam_rz , \\ sam_ry , sam_iz , sam_iy , sam_zy observed_optical_magnitudes = ec_gmag , ec_rmag , ec_imag , \\ ec_zmag , ec_ymag e_observed_optical_magnitudes = e_ec_gmag , e_ec_rmag , \\ e_ec_imag , e_ec_zmag , e_ec_ymag sam_magnitudes = sam_g , sam_r , sam_i , sam_z , sam_y , \\ sam_j , sam_h , sam_k data = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) \\ . replace ( '.' , '_' ) with open ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , 'w' , encoding = 'UTF8' ) as file1 : writer = csv . writer ( file1 ) writer . writerow ( header ) for j in range ( len ( ec_gmag )): dquad_arr , min_dquad , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ = \\ compute_dquad ( j , oc = observed_colours , mc = model_colours ) min_dquad_element = find_nearest ( dquad_arr , min_dquad ) index_best_fit_sam = np . where ( min_dquad_element == ( dquad_arr ))[ 0 ] sf_avg , sigma_sf , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error = calc_sf ( j , observed_optical_magnitudes , \\ e_observed_optical_magnitudes , \\ sam_magnitudes , index_best_fit_sam , \\ aj , ah , ak ) gaia_angular_seperation = 3600 * np . sqrt ((( ps_ra [ j ] - gaia_ra ) * np . cos ( np . radians ( ps_dec [ j ]))) ** 2 + ( ps_dec [ j ] - gaia_dec ) ** 2 ) index_min_ang_seperation = np . where ( gaia_angular_seperation <= 1.0 )[ 0 ] if len ( index_min_ang_seperation ) > 1.0 : gaia_ang_seperation_selected = gaia_angular_seperation [ index_min_ang_seperation ] min_gaia_ang_seperation = gaia_angular_seperation \\ [ np . where ( np . min ( gaia_ang_seperation_selected ) \\ == gaia_angular_seperation )[ 0 ]] index_min_ang_seperation = np . where ( min_gaia_ang_seperation \\ == gaia_angular_seperation )[ 0 ] data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], \\ err_ps_dec [ j ], ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], \\ e_ec_rmag [ j ], ec_imag [ j ], e_ec_imag [ j ], ec_zmag [ j ], \\ e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], teff [ j ], \\ logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , \\ gaia_source_id [ index_min_ang_seperation ][ 0 ], gaia_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_ra_error [ index_min_ang_seperation ][ 0 ], gaia_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_dec_error [ index_min_ang_seperation ][ 0 ], gaia_parallax [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax_error [ index_min_ang_seperation ][ 0 ], gaia_pm [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra [ index_min_ang_seperation ][ 0 ], gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec [ index_min_ang_seperation ][ 0 ], gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_ruwe [ index_min_ang_seperation ][ 0 ], objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], \\ nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], \\ rinfoflag3 [ j ], iinfoflag [ j ], iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], \\ zinfoflag3 [ j ], yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 0.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , - 999 , - 999 , - 999 , \\ - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , objinfoflag [ j ], \\ qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], \\ ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], \\ yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 1.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , gaia_source_id [ index_min_ang_seperation ][ 0 ], \\ gaia_ra [ index_min_ang_seperation ][ 0 ], gaia_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_dec [ index_min_ang_seperation ][ 0 ], gaia_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax [ index_min_ang_seperation ][ 0 ], gaia_parallax_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm [ index_min_ang_seperation ][ 0 ], gaia_pm_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], gaia_pm_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], gaia_ruwe [ index_min_ang_seperation ][ 0 ], \\ objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], \\ ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], yinfoflag [ j ], \\ iinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) return data generate_irgsc ( use_optimal_method = True ) irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True) This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). \\[ ES = \\frac{\\int{F_{\\lambda}P_{\\lambda}{\\lambda} d{\\lambda}}}{\\int{P_{\\lambda}{\\lambda}d{\\lambda}}} \\] The spectra is obtained from pysynphot More information here The model parameters are: \\(T_{eff}\\) , log(g) and [Fe/H]. Source code in irgsctool/_fitting.pydef generate_irgsc ( self , use_optimal_method = True ): \"\"\" `irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True)` <justify> This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). $$ ES = \\\\frac{\\\\int{F_{\\\\lambda}P_{\\\\lambda}{\\\\lambda} d{\\\\lambda}}}{\\\\int{P_{\\\\lambda}{\\\\lambda}d{\\\\lambda}}} $$ The spectra is obtained from pysynphot [More information here](https://pysynphot.readthedocs.io) The model parameters are: $T_{eff}$, log(g) and [Fe/H].</justify> \"\"\" if use_optimal_method is True : print ( \"\" ) print ( '#########################################' ) print ( 'Computing the NIR magnitudes for the sources using the optimal method' ) print ( '#########################################' ) print ( \"\" ) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , gkron , e_gkron , \\ ec_rmag , e_ec_rmag , rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , ec_zmag , \\ e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , \\ yinfoflag , yinfoflag2 , yinfoflag3 = self . ec . extinction_corrected_photometry () _ , _ , aj , ah , ak = self . ec . get_reddening () gaia_data = self . rd . read_gaia_data () gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe = gaia_data k0 = Models ( 'Kurucz' ) k0 . read_sam_file () c1 = Models ( 'Phoenix' ) c1 . read_sam_file () c2 = Models ( 'Phoenix' ) c2 . read_sam_file () model_params_k0 = k0 . select_sam ( teff_range = [ 4000 , 10000 ], logg_range = None , feh_range = None , use_optimal_method = True ) model_params_c1 = c1 . select_sam ( teff_range = [ 2800 , 5000 ], logg_range = [ 3.0 , 5.5 ], feh_range = [ - 5.0 , - 1.5 ], use_optimal_method = True ) model_params_c2 = c2 . select_sam ( teff_range = [ 2800 , 4000 ], logg_range = [ 0.0 , 3.0 ], feh_range = [ - 0.5 , 1.5 ], use_optimal_method = True ) teff_c1 , logg_c1 , feh_c1 , sam_g_c1 , sam_r_c1 , sam_i_c1 , sam_z_c1 , sam_y_c1 , sam_j_c1 , \\ sam_h_c1 , sam_k_c1 = model_params_c1 teff_c2 , logg_c2 , feh_c2 , sam_g_c2 , sam_r_c2 , sam_i_c2 , sam_z_c2 , sam_y_c2 , sam_j_c2 , \\ sam_h_c2 , sam_k_c2 = model_params_c2 teff_k0 , logg_k0 , feh_k0 , sam_g_k0 , sam_r_k0 , sam_i_k0 , sam_z_k0 , sam_y_k0 , sam_j_k0 , \\ sam_h_k0 , sam_k_k0 = model_params_k0 teff = np . concatenate (( teff_c1 , teff_c2 , teff_k0 ), axis = 0 ) logg = np . concatenate (( logg_c1 , logg_c2 , logg_k0 ), axis = 0 ) feh = np . concatenate (( feh_c1 , feh_c2 , feh_k0 ), axis = 0 ) sam_g = np . concatenate (( sam_g_c1 , sam_g_c2 , sam_g_k0 ), axis = 0 ) sam_r = np . concatenate (( sam_r_c1 , sam_r_c2 , sam_r_k0 ), axis = 0 ) sam_i = np . concatenate (( sam_i_c1 , sam_i_c2 , sam_i_k0 ), axis = 0 ) sam_z = np . concatenate (( sam_z_c1 , sam_z_c2 , sam_z_k0 ), axis = 0 ) sam_y = np . concatenate (( sam_y_c1 , sam_y_c2 , sam_y_k0 ), axis = 0 ) sam_j = np . concatenate (( sam_j_c1 , sam_j_c2 , sam_j_k0 ), axis = 0 ) sam_h = np . concatenate (( sam_h_c1 , sam_h_c2 , sam_h_k0 ), axis = 0 ) sam_k = np . concatenate (( sam_k_c1 , sam_k_c2 , sam_k_k0 ), axis = 0 ) sam_gr = sam_g - sam_r sam_ri = sam_r - sam_i sam_gi = sam_g - sam_i sam_gz = sam_g - sam_z sam_gy = sam_g - sam_y sam_ry = sam_r - sam_y sam_rz = sam_r - sam_z sam_iz = sam_i - sam_z sam_iy = sam_i - sam_y sam_zy = sam_z - sam_y observed_colours = ( ec_gmag - ec_rmag ), ( ec_gmag - ec_imag ), \\ ( ec_gmag - ec_rmag ), ( ec_gmag - ec_ymag ), ( ec_rmag - ec_imag ), \\ ( ec_rmag - ec_ymag ), ( ec_rmag - ec_zmag ), ( ec_imag - ec_zmag ), \\ ( ec_imag - ec_ymag ), ( ec_zmag - ec_ymag ) model_colours = sam_gr , sam_gi , sam_gz , sam_gy , sam_ri , sam_rz , \\ sam_ry , sam_iz , sam_iy , sam_zy observed_optical_magnitudes = ec_gmag , ec_rmag , ec_imag , \\ ec_zmag , ec_ymag e_observed_optical_magnitudes = e_ec_gmag , e_ec_rmag , \\ e_ec_imag , e_ec_zmag , e_ec_ymag sam_magnitudes = sam_g , sam_r , sam_i , sam_z , sam_y , \\ sam_j , sam_h , sam_k data = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) \\ . replace ( '.' , '_' ) with open ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , 'w' , encoding = 'UTF8' ) as file1 : writer = csv . writer ( file1 ) writer . writerow ( header ) for j in range ( len ( ec_gmag )): dquad_arr , min_dquad , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ = \\ compute_dquad ( j , oc = observed_colours , mc = model_colours ) min_dquad_element = find_nearest ( dquad_arr , min_dquad ) index_best_fit_sam = np . where ( min_dquad_element == ( dquad_arr ))[ 0 ] sf_avg , sigma_sf , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error = calc_sf ( j , observed_optical_magnitudes , \\ e_observed_optical_magnitudes , \\ sam_magnitudes , index_best_fit_sam , \\ aj , ah , ak ) gaia_angular_seperation = 3600 * np . sqrt ((( ps_ra [ j ] - gaia_ra ) * np . cos ( np . radians ( ps_dec [ j ]))) ** 2 + ( ps_dec [ j ] - gaia_dec ) ** 2 ) index_min_ang_seperation = np . where ( gaia_angular_seperation <= 1.0 )[ 0 ] if len ( index_min_ang_seperation ) > 1.0 : gaia_ang_seperation_selected = gaia_angular_seperation [ index_min_ang_seperation ] min_gaia_ang_seperation = gaia_angular_seperation \\ [ np . where ( np . min ( gaia_ang_seperation_selected ) \\ == gaia_angular_seperation )[ 0 ]] index_min_ang_seperation = np . where ( min_gaia_ang_seperation \\ == gaia_angular_seperation )[ 0 ] data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], \\ err_ps_dec [ j ], ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], \\ e_ec_rmag [ j ], ec_imag [ j ], e_ec_imag [ j ], ec_zmag [ j ], \\ e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], teff [ j ], \\ logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , \\ gaia_source_id [ index_min_ang_seperation ][ 0 ], gaia_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_ra_error [ index_min_ang_seperation ][ 0 ], gaia_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_dec_error [ index_min_ang_seperation ][ 0 ], gaia_parallax [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax_error [ index_min_ang_seperation ][ 0 ], gaia_pm [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra [ index_min_ang_seperation ][ 0 ], gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec [ index_min_ang_seperation ][ 0 ], gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_ruwe [ index_min_ang_seperation ][ 0 ], objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], \\ nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], \\ rinfoflag3 [ j ], iinfoflag [ j ], iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], \\ zinfoflag3 [ j ], yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 0.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , - 999 , - 999 , - 999 , \\ - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , objinfoflag [ j ], \\ qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], \\ ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], \\ yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 1.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , gaia_source_id [ index_min_ang_seperation ][ 0 ], \\ gaia_ra [ index_min_ang_seperation ][ 0 ], gaia_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_dec [ index_min_ang_seperation ][ 0 ], gaia_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax [ index_min_ang_seperation ][ 0 ], gaia_parallax_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm [ index_min_ang_seperation ][ 0 ], gaia_pm_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], gaia_pm_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], gaia_ruwe [ index_min_ang_seperation ][ 0 ], \\ objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], \\ ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], yinfoflag [ j ], \\ iinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) return data ValidateIRGSC The Validate class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. Source code in irgsctool/_validate.pyclass ValidateIRGSC (): \"\"\" ------------------------------------------ The ***Validate*** class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data def validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () read_irgsc () irgsctool.validate.read_irgsc() reads the generated IRGSC for a given set of coordinates. Raises: Type Description FileNotFoundError if there is no generated IRGSC available and then generates it. Source code in irgsctool/_validate.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data validate ( validate = True ) Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. Source code in irgsctool/_validate.pydef validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"API"},{"location":"apireference/#api-reference","text":"This page introduces to the classes and functions in the irgsctool package. The main class is the irgsc class which has several subclasses like GetData, ReadData, StarGalaxyClassification, ExtinctionCorrection, GenerateIRGSC, ValidateIRGSC","title":"API Reference"},{"location":"apireference/#irgsctool.irgsc","text":"Bases: GetData , ReadData , StarGalaxyClassification , ExtinctionCorrection , Models , GenerateIRGSC , ValidateIRGSC Initialisation of parent irgsc Class. Source code in irgsctool/__init__.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class irgsc ( GetData , ReadData , StarGalaxyClassification , ExtinctionCorrection , Models , GenerateIRGSC , ValidateIRGSC ): \"\"\" Initialisation of parent irgsc Class. \"\"\" print ( '##########################################################################' ) print ( \"\" ) print ( 'Initializing' ) print ( \"\" ) print ( '##########################################################################' ) print ( \"\" ) def __init__ ( self , ra , dec , validate = None ): \"\"\" __init__ function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: ValueError: if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not\\ proceed further. Warning: if the data is not available in the Gaia DR3\\ survey. \"\"\" print ( '' ) print ( '##################################################' ) print ( 'Checking the input coordinates' ) print ( '' ) print ( '##################################################' ) print ( '' ) self . ra = ra self . dec = dec self . validate = validate gd = GetData ( self . ra , self . dec ) rd = ReadData ( self . ra , self . dec ) if self . ra < 0.0 or self . dec <- 30.0 : raise ValueError ( 'Please check the input coordinates' ) sys . exit ( 0 ) ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) #Checking whether UKIDSS data is available for the given field. ###If yes then obtaining it. file_name = 'UKIDSS' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : validating_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_ukidss_data ( self . ra , self . dec ) validating_data = rd . read_nir_data ( self . ra , self . dec ) self . validate = True if len ( validating_data ) == 0.0 : self . validate = False raise ValueError ( 'UKIDSS Observed NIR data not available. \\ Validation of the generated IRGSC is not \\ possible for this field!!!' ) sys . exit ( 0 ) ###Obtaining the PANSTARRS data for the given field. file_name = 'PS1' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : optical_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_panstarrs_data ( self . ra , self . dec ) optical_data = np . genfromtxt ( file_name + '.csv' ) if len ( optical_data ) == 0.0 : raise ValueError ( 'Optical data is outside the range of PANSTARRS 3-pi survey. \\ Please check the input coordinates!!!' ) sys . exit ( 0 ) #Obtaining the GAIA data for the given field file_name = 'GAIA' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_gaia_data ( self . ra , self . dec ) gaia_data = np . genfromtxt ( file_name + '.csv' ) if len ( gaia_data ) == 0.0 : warnings . warn ( 'GAIA data not available for this field!!! \\ The generated catalog will contain -999 \\ values for GAIA information.' )","title":"irgsc"},{"location":"apireference/#irgsctool.irgsc.__init__","text":"init function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: Type Description ValueError if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not proceed further. Warning if the data is not available in the Gaia DR3 survey. Source code in irgsctool/__init__.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def __init__ ( self , ra , dec , validate = None ): \"\"\" __init__ function described using input ra and dec. It checks whther the data from PANSTARRS DR2, UKISS DR11 and Gaia DR3 can be obtained. Raises: ValueError: if the data is not available in UKIDSS or PANSTARRS 3-pi survey. The code will not\\ proceed further. Warning: if the data is not available in the Gaia DR3\\ survey. \"\"\" print ( '' ) print ( '##################################################' ) print ( 'Checking the input coordinates' ) print ( '' ) print ( '##################################################' ) print ( '' ) self . ra = ra self . dec = dec self . validate = validate gd = GetData ( self . ra , self . dec ) rd = ReadData ( self . ra , self . dec ) if self . ra < 0.0 or self . dec <- 30.0 : raise ValueError ( 'Please check the input coordinates' ) sys . exit ( 0 ) ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) #Checking whether UKIDSS data is available for the given field. ###If yes then obtaining it. file_name = 'UKIDSS' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : validating_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_ukidss_data ( self . ra , self . dec ) validating_data = rd . read_nir_data ( self . ra , self . dec ) self . validate = True if len ( validating_data ) == 0.0 : self . validate = False raise ValueError ( 'UKIDSS Observed NIR data not available. \\ Validation of the generated IRGSC is not \\ possible for this field!!!' ) sys . exit ( 0 ) ###Obtaining the PANSTARRS data for the given field. file_name = 'PS1' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : optical_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_panstarrs_data ( self . ra , self . dec ) optical_data = np . genfromtxt ( file_name + '.csv' ) if len ( optical_data ) == 0.0 : raise ValueError ( 'Optical data is outside the range of PANSTARRS 3-pi survey. \\ Please check the input coordinates!!!' ) sys . exit ( 0 ) #Obtaining the GAIA data for the given field file_name = 'GAIA' + '_' + 'ra' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( file_name + '.csv' ) except FileNotFoundError : gd . get_gaia_data ( self . ra , self . dec ) gaia_data = np . genfromtxt ( file_name + '.csv' ) if len ( gaia_data ) == 0.0 : warnings . warn ( 'GAIA data not available for this field!!! \\ The generated catalog will contain -999 \\ values for GAIA information.' ) Module to obtain data or a given set of input coordinates.","title":"__init__()"},{"location":"apireference/#irgsctool._get_data.GetData","text":"Class to obtain PANSTARRS DR2 Stacked optical photometry data, UKIDSS NIR observed data and GAIA DR3 astrometry data. The default search radius is 0.25 degrees due to the limitation of pyvo. The data retrieved is stored in .csv format with the name of the survey + ra + dec Input R.A. (float) degrees Dec. (float) degrees Range Dec > -30 degrees Examples: >>> get_panstarrs_data ( 0.0 , 0.0 ) 'PS1_RA_0_0_DEC_0_0.csv' >>> get_gaia_data ( 0.0 , 0.0 ) 'GAIA_RA_0_0_DEC_0_0.csv' >>> get_ukidss_data ( 0.0 , 0.0 ) 'UKIDSS_RA_0_0_DEC_0_0.csv' Source code in irgsctool/_get_data.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class GetData (): \"\"\" Class to obtain PANSTARRS DR2 Stacked optical photometry data, UKIDSS NIR observed data and GAIA DR3 astrometry data. The default search radius is 0.25 degrees due to the limitation of pyvo. The data retrieved is stored in .csv format with the name of the survey + ra + dec Input: R.A. (float) degrees Dec. (float) degrees Range: Dec > -30 degrees Examples: >>> get_panstarrs_data(0.0,0.0) 'PS1_RA_0_0_DEC_0_0.csv' >>> get_gaia_data(0.0,0.0) 'GAIA_RA_0_0_DEC_0_0.csv' >>> get_ukidss_data(0.0,0.0) 'UKIDSS_RA_0_0_DEC_0_0.csv' \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec def get_panstarrs_data ( self ): \"\"\" Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' Tap_Service = vo . dal . TAPService ( \"https://vao.stsci.edu/PS1DR2/tapservice.aspx\" ) #Tap_service.describe() Tap_Tables = Tap_Service . tables #for tablename in Tap_Tables.keys(): #if not \"TAP_schema\" in tablename: #Tap_Tables[tablename].describe() #print(\"Columns={}\".format(sorted([k.name for k in\\ # Tap_Tables[tablename].columns ]))) #print(\"----\") query = \"\"\" SELECT objID, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2, zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3 FROM dbo.StackObjectView WHERE CONTAINS(POINT('ICRS', RAMean, DecMean),CIRCLE('ICRS', {} , {} , {} ))=1 \"\"\" . format ( self . ra , self . dec , 0.25 ) try : job = Tap_Service . search ( query ) Tap_Results = job . to_table () np . savetxt ( str ( file_name ), \\ Tap_Results , delimiter = ',' , header = 'objid, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2,zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3' ) except Exception : raise ValueError ( 'This field is outside the sky coverage of PANSTARRS' ) return Tap_Results def get_gaia_data ( self ): \"\"\" Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all\\ the rows in the given field. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' #tables = Gaia.load_tables(only_names=True) #for table in (tables): #print (table.get_qualified_name()) coord = SkyCoord ( ra = self . ra , dec = self . dec , unit = ( u . degree , u . degree ), frame = 'icrs' ) Gaia . MAIN_GAIA_TABLE = \"gaiadr3.gaia_source\" Gaia . ROW_LIMIT = - 1 try : job = Gaia . cone_search ( coordinate = coord , radius = u . Quantity ( 0.25 , u . deg ), \\ table_name = \"gaiadr3.gaia_source\" , \\ output_file = file_name , output_format = 'csv' , verbose = True , \\ dump_to_file = True , columns = [ 'source_id' , 'ra' , 'ra_error' , 'dec' , \\ 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , \\ 'pmdec_error' , 'ruwe' ]) except Exception : raise ValueError ( 'No Gaia observations for this field' ) return job . get_results () def get_ukidss_data ( self ): \"\"\" Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. \"\"\" catalogs = [ 'UDS' , 'GCS' , 'GPS' , 'DXS' , 'LAS' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' Ukidss . filters = { 'H' : 4 , 'J' : 3 , 'K' : 5 } for i in range ( len ( catalogs )): print ( '' ) print ( 'Name of the catalog:' , str ( catalogs [ i ])) try : table = Ukidss . query_region ( SkyCoord ( self . ra , self . dec , unit = ( u . deg , u . deg ), frame = 'icrs' ), \\ radius = 0.25 * u . deg , programme_id = str ( catalogs [ i ]), \\ database = 'UKIDSSDR11PLUS' , attributes = [ 'ra' , 'dec' , 'jPetroMag' , 'jPetroMagErr' , 'hPetroMag' , 'hPetroMagErr' , 'kPetroMag' , 'kPetroMagErr' ], verbose = True ) table . write ( file_name , format = 'csv' , overwrite = True ) except Exception : raise ValueError ( 'No observations in' + ' ' + str ( catalogs [ i ]) + ' ' + 'catalog of UKIDSS' ) return table","title":"GetData"},{"location":"apireference/#irgsctool._get_data.GetData.get_gaia_data","text":"Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all the rows in the given field. Source code in irgsctool/_get_data.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def get_gaia_data ( self ): \"\"\" Query to obtain GAIA DR# data. This function uses astroquery module. The ROW_LIMIT is set to -1 which implies that the query retriees all\\ the rows in the given field. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' #tables = Gaia.load_tables(only_names=True) #for table in (tables): #print (table.get_qualified_name()) coord = SkyCoord ( ra = self . ra , dec = self . dec , unit = ( u . degree , u . degree ), frame = 'icrs' ) Gaia . MAIN_GAIA_TABLE = \"gaiadr3.gaia_source\" Gaia . ROW_LIMIT = - 1 try : job = Gaia . cone_search ( coordinate = coord , radius = u . Quantity ( 0.25 , u . deg ), \\ table_name = \"gaiadr3.gaia_source\" , \\ output_file = file_name , output_format = 'csv' , verbose = True , \\ dump_to_file = True , columns = [ 'source_id' , 'ra' , 'ra_error' , 'dec' , \\ 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , \\ 'pmdec_error' , 'ruwe' ]) except Exception : raise ValueError ( 'No Gaia observations for this field' ) return job . get_results ()","title":"get_gaia_data()"},{"location":"apireference/#irgsctool._get_data.GetData.get_panstarrs_data","text":"Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. Source code in irgsctool/_get_data.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get_panstarrs_data ( self ): \"\"\" Query to obtain the PANSTARRS data from DR2 database. The query uses pyvo TAPService module for retrieving the data. The data is selected from StackObjectView db and the maximum search radius is 0.25 degrees. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' Tap_Service = vo . dal . TAPService ( \"https://vao.stsci.edu/PS1DR2/tapservice.aspx\" ) #Tap_service.describe() Tap_Tables = Tap_Service . tables #for tablename in Tap_Tables.keys(): #if not \"TAP_schema\" in tablename: #Tap_Tables[tablename].describe() #print(\"Columns={}\".format(sorted([k.name for k in\\ # Tap_Tables[tablename].columns ]))) #print(\"----\") query = \"\"\" SELECT objID, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2, zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3 FROM dbo.StackObjectView WHERE CONTAINS(POINT('ICRS', RAMean, DecMean),CIRCLE('ICRS', {} , {} , {} ))=1 \"\"\" . format ( self . ra , self . dec , 0.25 ) try : job = Tap_Service . search ( query ) Tap_Results = job . to_table () np . savetxt ( str ( file_name ), \\ Tap_Results , delimiter = ',' , header = 'objid, RAMean, RAMeanErr, DecMean, DecMeanErr, gPSFMag, gPSFMagErr, gKronMag, gKronMagErr, rPSFMag, rPSFMagErr, rKronMag, rKronMagErr, iPSFMag, iPSFMagErr, iKronMag, iKronMagErr, zPSFMag, zPSFMagErr, zKronMag, zKronMagErr, yPSFMag, yPSFMagErr, yKronMag, yKronMagErr, objInfoFlag, qualityFlag, nDetections, nStackDetections, ginfoFlag, ginfoFlag2, ginfoFlag3, rinfoFlag, rinfoFlag2, rinfoFlag3, iinfoFlag, iinfoFlag2, iinfoFlag3, zinfoFlag, zinfoFlag2,zinfoFlag3, yinfoFlag, yinfoFlag2, yinfoFlag3' ) except Exception : raise ValueError ( 'This field is outside the sky coverage of PANSTARRS' ) return Tap_Results","title":"get_panstarrs_data()"},{"location":"apireference/#irgsctool._get_data.GetData.get_ukidss_data","text":"Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. Source code in irgsctool/_get_data.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def get_ukidss_data ( self ): \"\"\" Query to obtain UKIDSS DR11 NIR data using astroquery. UKIDSS consists of five sub-surveys viz. UDS, GPS, GCS, DXS and LAS. The query loops over this surveys and retrieves the data for the given coordinates. \"\"\" catalogs = [ 'UDS' , 'GCS' , 'GPS' , 'DXS' , 'LAS' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) \\ + 'DEC' + str ( dec_name ) + '.csv' Ukidss . filters = { 'H' : 4 , 'J' : 3 , 'K' : 5 } for i in range ( len ( catalogs )): print ( '' ) print ( 'Name of the catalog:' , str ( catalogs [ i ])) try : table = Ukidss . query_region ( SkyCoord ( self . ra , self . dec , unit = ( u . deg , u . deg ), frame = 'icrs' ), \\ radius = 0.25 * u . deg , programme_id = str ( catalogs [ i ]), \\ database = 'UKIDSSDR11PLUS' , attributes = [ 'ra' , 'dec' , 'jPetroMag' , 'jPetroMagErr' , 'hPetroMag' , 'hPetroMagErr' , 'kPetroMag' , 'kPetroMagErr' ], verbose = True ) table . write ( file_name , format = 'csv' , overwrite = True ) except Exception : raise ValueError ( 'No observations in' + ' ' + str ( catalogs [ i ]) + ' ' + 'catalog of UKIDSS' ) return table Module to read the data downloaded for the given set of input coordinates.","title":"get_ukidss_data()"},{"location":"apireference/#irgsctool._read_data.ReadData","text":"Class to read the photometric data from PS1 DR2, GAIA DR3 and UKIDSS DR11. Source code in irgsctool/_read_data.pyclass ReadData (): \"\"\"Class to read the photometric data from PS1 DR2, GAIA DR3 and UKIDSS DR11. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . gd = GetData ( ra , dec ) def read_optical_data ( self ): \"\"\" Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) except FileNotFoundError : self . gd . get_panstarrs_data () ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) ps1_objid = ps1_data [:, 0 ] ps_ra = ps1_data [:, 1 ] err_ps_ra = ps1_data [:, 2 ] ps_dec = ps1_data [:, 3 ] err_ps_dec = ps1_data [:, 4 ] gmag = ps1_data [:, 5 ] e_gmag = ps1_data [:, 6 ] gkron = ps1_data [:, 7 ] e_gkron = ps1_data [:, 8 ] rmag = ps1_data [:, 9 ] e_rmag = ps1_data [:, 10 ] rkron = ps1_data [:, 11 ] e_rkron = ps1_data [:, 12 ] imag = ps1_data [:, 13 ] e_imag = ps1_data [:, 14 ] ikron = ps1_data [:, 15 ] e_ikron = ps1_data [:, 16 ] zmag = ps1_data [:, 17 ] e_zmag = ps1_data [:, 18 ] zkron = ps1_data [:, 19 ] e_zkron = ps1_data [:, 20 ] ymag = ps1_data [:, 21 ] e_ymag = ps1_data [:, 22 ] ykron = ps1_data [:, 23 ] e_ykron = ps1_data [:, 24 ] objinfoflag = ps1_data [:, 25 ] qualityflag = ps1_data [:, 26 ] ndetections = ps1_data [:, 27 ] nstackdetections = ps1_data [:, 28 ] ginfoflag = ps1_data [:, 29 ] ginfoflag2 = ps1_data [:, 30 ] ginfoflag3 = ps1_data [:, 31 ] rinfoflag = ps1_data [:, 32 ] rinfoflag2 = ps1_data [:, 33 ] rinfoflag3 = ps1_data [:, 34 ] iinfoflag = ps1_data [:, 35 ] iinfoflag2 = ps1_data [:, 36 ] iinfoflag3 = ps1_data [:, 37 ] zinfoflag = ps1_data [:, 38 ] zinfoflag2 = ps1_data [:, 39 ] zinfoflag3 = ps1_data [:, 40 ] yinfoflag = ps1_data [:, 41 ] yinfoflag2 = ps1_data [:, 42 ] yinfoflag3 = ps1_data [:, 43 ] ps1_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gmag , \\ e_gmag , gkron , e_gkron , rmag , e_rmag , rkron , e_rkron , imag , \\ e_imag , ikron , e_ikron , zmag , e_zmag , zkron , e_zkron , ymag , \\ e_ymag , ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , \\ yinfoflag3 print ( 'Number of rows in the PANSTARRS file:' , \\ len ( ps1_objid )) oid1 = np . array ([ list ( set ( ps1_objid ))])[ 0 ] oid1 = [ * set ( ps1_objid )] ptsf = [] for i in range ( len ( oid1 )): ptsi = np . where ( oid1 [ i ] == ps1_objid )[ 0 ] if len ( ptsi ) > 1.0 : ptsi = ptsi [ 0 ] ptsf = np . append ( ptsf , ptsi ) ptsf = np . int64 ( ptsf ) else : ptsf = np . append ( ptsf , ptsi ) ps1_objid = ps1_objid [ ptsf ] ps_ra = ps_ra [ ptsf ] ps_dec = ps_dec [ ptsf ] err_ps_ra = err_ps_ra [ ptsf ] err_ps_dec = err_ps_dec [ ptsf ] gmag = gmag [ ptsf ] gkron = gkron [ ptsf ] e_gmag = e_gmag [ ptsf ] e_gkron = e_gkron [ ptsf ] rmag = rmag [ ptsf ] rkron = rkron [ ptsf ] e_rmag = e_rmag [ ptsf ] e_rkron = e_rkron [ ptsf ] imag = imag [ ptsf ] ikron = ikron [ ptsf ] e_imag = e_imag [ ptsf ] e_ikron = e_ikron [ ptsf ] zmag = zmag [ ptsf ] zkron = zkron [ ptsf ] e_zmag = e_zmag [ ptsf ] e_zkron = e_zkron [ ptsf ] ymag = ymag [ ptsf ] ykron = ykron [ ptsf ] e_ymag = e_ymag [ ptsf ] e_ykron = e_ykron [ ptsf ] objinfoflag = objinfoflag [ ptsf ] qualityflag = qualityflag [ ptsf ] ndetections = ndetections [ ptsf ] nstackdetections = nstackdetections [ ptsf ] ginfoflag = ginfoflag [ ptsf ] ginfoflag2 = ginfoflag2 [ ptsf ] ginfoflag3 = ginfoflag3 [ ptsf ] rinfoflag = rinfoflag [ ptsf ] rinfoflag2 = rinfoflag2 [ ptsf ] rinfoflag3 = rinfoflag3 [ ptsf ] iinfoflag = iinfoflag [ ptsf ] iinfoflag2 = iinfoflag2 [ ptsf ] iinfoflag3 = iinfoflag3 [ ptsf ] zinfoflag = zinfoflag [ ptsf ] zinfoflag2 = zinfoflag2 [ ptsf ] zinfoflag3 = zinfoflag3 [ ptsf ] yinfoflag = yinfoflag [ ptsf ] yinfoflag2 = yinfoflag2 [ ptsf ] yinfoflag3 = yinfoflag3 [ ptsf ] print ( \"\" ) print ( 'Now filtering the optical data for nan values' ) print ( \"\" ) print ( 'Number of sources in the PANSTARRS data:' , \\ len ( ps1_objid )) print ( \"\" ) indices_only_ifilered = np . where ( imag != - 999 )[ 0 ] binwidth = 0.5 bins = np . arange ( np . min ( imag [ indices_only_ifilered ]), \\ np . max ( imag [ indices_only_ifilered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( imag [ indices_only_ifilered ], bins = bins , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . xlabel ( 'Only $i_ {mag} $ observations' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_only_imag_in_panstarrs_data.png' ) plt . clf () indices_all_filtered = np . where (( gmag != - 999 ) & ( imag != - 999 ) & \\ ( rmag != - 999 ) & ( zmag != - 999 ) & \\ ( ymag != - 999 ) & ( e_gmag != - 999 ) & \\ ( e_rmag != - 999 ) & ( e_imag != - 999 ) & \\ ( e_zmag != - 999 ) & ( e_ymag != - 999 ) & \\ ( gkron != - 999 ) & ( ikron != - 999 ) & \\ ( zkron != - 999 ) & ( ykron != - 999 ) & \\ ( rkron != - 999 ) & ( e_gmag < 0.2 ) & \\ ( e_rmag < 0.2 ) & ( e_imag < 0.2 ) & \\ ( e_zmag < 0.2 ) & ( e_ymag < 0.2 ))[ 0 ] print ( 'Number of sources having detections in five optical bands=' , \\ len ( indices_all_filtered )) binwidth = 0.5 bins_g = np . arange ( np . min ( gmag [ indices_all_filtered ]), \\ np . max ( gmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_r = np . arange ( np . min ( rmag [ indices_all_filtered ]), \\ np . max ( rmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_i = np . arange ( np . min ( imag [ indices_all_filtered ]), \\ np . max ( imag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_z = np . arange ( np . min ( zmag [ indices_all_filtered ]), \\ np . max ( zmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_y = np . arange ( np . min ( ymag [ indices_all_filtered ]), \\ np . max ( ymag [ indices_all_filtered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( gmag [ indices_all_filtered ], bins = bins_g , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$g_ {mag} $' ) plt . hist ( rmag [ indices_all_filtered ], bins = bins_r , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = '$r_ {mag} $' ) plt . hist ( imag [ indices_all_filtered ], bins = bins_i , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . hist ( zmag [ indices_all_filtered ], bins = bins_z , \\ facecolor = 'white' , edgecolor = 'orange' , \\ linestyle = '--' , label = '$z_ {mag} $' ) plt . hist ( ymag [ indices_all_filtered ], bins = bins_y , \\ facecolor = 'white' , edgecolor = 'purple' , \\ linestyle = '--' , label = '$y_ {mag} $' ) plt . xlabel ( 'PANSTARRS observed data' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_panstarrs_data.png' ) plt . clf () raw_optical_data = ps1_objid [ indices_all_filtered ], \\ ps_ra [ indices_all_filtered ], err_ps_ra [ indices_all_filtered ], \\ ps_dec [ indices_all_filtered ], err_ps_dec [ indices_all_filtered ], \\ gmag [ indices_all_filtered ], e_gmag [ indices_all_filtered ], \\ gkron [ indices_all_filtered ], e_gkron [ indices_all_filtered ], \\ rmag [ indices_all_filtered ], e_rmag [ indices_all_filtered ], \\ rkron [ indices_all_filtered ], e_rkron [ indices_all_filtered ], \\ imag [ indices_all_filtered ], e_imag [ indices_all_filtered ], \\ ikron [ indices_all_filtered ], e_ikron [ indices_all_filtered ], \\ zmag [ indices_all_filtered ], e_zmag [ indices_all_filtered ], \\ zkron [ indices_all_filtered ], e_zkron [ indices_all_filtered ], \\ ymag [ indices_all_filtered ], e_ymag [ indices_all_filtered ], \\ ykron [ indices_all_filtered ], e_ykron [ indices_all_filtered ], \\ objinfoflag [ indices_all_filtered ], qualityflag [ indices_all_filtered ], \\ ndetections [ indices_all_filtered ], nstackdetections [ indices_all_filtered ], \\ ginfoflag [ indices_all_filtered ], ginfoflag2 [ indices_all_filtered ], \\ ginfoflag3 [ indices_all_filtered ], rinfoflag [ indices_all_filtered ], \\ rinfoflag2 [ indices_all_filtered ], rinfoflag3 [ indices_all_filtered ], \\ iinfoflag [ indices_all_filtered ], iinfoflag2 [ indices_all_filtered ], \\ iinfoflag3 [ indices_all_filtered ], zinfoflag [ indices_all_filtered ], \\ zinfoflag2 [ indices_all_filtered ], zinfoflag3 [ indices_all_filtered ], \\ yinfoflag [ indices_all_filtered ], yinfoflag2 [ indices_all_filtered ], \\ yinfoflag3 [ indices_all_filtered ] return raw_optical_data def read_nir_data ( self ): \"\"\" Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' print ( 'UKIDSS file name=' , file_name ) file_exists = os . path . exists ( file_name ) print ( \"\" ) print ( 'Does UKIDSS observed NIR data file exist?' , file_exists ) print ( \"\" ) if file_exists is False : print ( 'Validated catalogue does not exist' ) print ( \"\" ) print ( '############################################' ) print ( 'Generating observed UKIDSS NIR data file...' ) print ( \"\" ) self . gd . get_ukidss_data () ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0.0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( np . abs ( e_petro_j ) < 0.2 ) & ( np . abs ( e_petro_h ) < 0.2 ) \\ & ( np . abs ( e_petro_k ) < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . gird () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec elif file_exists is True : print ( \"\" ) print ( 'Reading the validated catalogue file:' + str ( file_name )) print ( \"\" ) ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , \\ len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), np . max ( filtered_petro_j ) + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), np . max ( filtered_petro_h ) + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), np . max ( filtered_petro_k ) + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec return nir_data def read_gaia_data ( self ): \"\"\" Reads the input GAIA DR3 data. The number of columns are 12. \"\"\" header = [ 'source_id' , 'ra' , 'ra_error,dec' , 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , 'pmdec_error' , 'ruwe' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe except FileNotFoundError : self . gd . get_gaia_data () gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , \\ skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe return gaia_data","title":"ReadData"},{"location":"apireference/#irgsctool._read_data.ReadData.read_gaia_data","text":"Reads the input GAIA DR3 data. The number of columns are 12. Source code in irgsctool/_read_data.py 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 def read_gaia_data ( self ): \"\"\" Reads the input GAIA DR3 data. The number of columns are 12. \"\"\" header = [ 'source_id' , 'ra' , 'ra_error,dec' , 'dec_error' , 'parallax' , 'parallax_error' , \\ 'pm' , 'pmra' , 'pmra_error' , 'pmdec' , 'pmdec_error' , 'ruwe' ] ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'GAIA' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe except FileNotFoundError : self . gd . get_gaia_data () gaia_data = np . genfromtxt ( str ( file_name ) + '.csv' , delimiter = ',' , \\ skip_header = 1 ) gaia_source_id = gaia_data [:, 0 ] gaia_ra = gaia_data [:, 1 ] gaia_ra_error = gaia_data [:, 2 ] gaia_dec = gaia_data [:, 3 ] gaia_dec_error = gaia_data [:, 4 ] gaia_parallax = gaia_data [:, 5 ] gaia_parallax_error = gaia_data [:, 6 ] gaia_pm = gaia_data [:, 7 ] gaia_pm_ra = gaia_data [:, 8 ] gaia_pm_ra_error = gaia_data [:, 9 ] gaia_pm_dec = gaia_data [:, 10 ] gaia_pm_dec_error = gaia_data [:, 11 ] gaia_ruwe = gaia_data [:, 12 ] gaia_data = gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , \\ gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe return gaia_data","title":"read_gaia_data()"},{"location":"apireference/#irgsctool._read_data.ReadData.read_nir_data","text":"Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. Source code in irgsctool/_read_data.pydef read_nir_data ( self ): \"\"\" Reads the input UKIDSS NIR data. The number of columns are 8. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. Some regions do not have J or H band data especially DXS or GCS surveys. For these regions, only K band data is imported. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'UKIDSS' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + '.csv' print ( 'UKIDSS file name=' , file_name ) file_exists = os . path . exists ( file_name ) print ( \"\" ) print ( 'Does UKIDSS observed NIR data file exist?' , file_exists ) print ( \"\" ) if file_exists is False : print ( 'Validated catalogue does not exist' ) print ( \"\" ) print ( '############################################' ) print ( 'Generating observed UKIDSS NIR data file...' ) print ( \"\" ) self . gd . get_ukidss_data () ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0.0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( np . abs ( e_petro_j ) < 0.2 ) & ( np . abs ( e_petro_h ) < 0.2 ) \\ & ( np . abs ( e_petro_k ) < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . gird () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec elif file_exists is True : print ( \"\" ) print ( 'Reading the validated catalogue file:' + str ( file_name )) print ( \"\" ) ukidss_data = np . genfromtxt ( str ( file_name ), delimiter = ',' , skip_header = 1 ) if len ( ukidss_data ) < 9.0 : raise ValueError ( 'No observations in UKIDSS' ) sys . exit ( 0 ) petro_j = ukidss_data [:, 2 ]; e_petro_j = ukidss_data [:, 3 ] petro_h = ukidss_data [:, 4 ]; e_petro_h = ukidss_data [:, 5 ] petro_k = ukidss_data [:, 6 ]; e_petro_k = ukidss_data [:, 7 ] ukidss_ra = ukidss_data [:, 0 ]; ukidss_dec = ukidss_data [:, 1 ] nir_filter_index = np . where (( petro_j != - 999999488 ) & ( e_petro_j != - 999999488 ) & \\ ( petro_h != - 999999488 ) & ( e_petro_h != - 999999488 ) & \\ ( petro_k != - 999999488 ) & ( e_petro_k != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] if len ( nir_filter_index ) == 0 : new_nir_filter_index = np . where (( petro_j != - 999999488 ) \\ & ( petro_k != - 999999488 ) & ( petro_h != - 999999488 ) & \\ ( e_petro_j < 0.2 ) & ( e_petro_h < 0.2 ) & ( e_petro_k < 0.2 ))[ 0 ] e_petro_j = 0.005 * petro_j [ new_nir_filter_index ] e_petro_h = 0.05 * petro_h [ new_nir_filter_index ] e_petro_k = 0.05 * petro_k [ new_nir_filter_index ] print ( \"\" ) print ( 'Number of sources in the NIR data = ' , \\ len ( new_nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ new_nir_filter_index ] filtered_petro_h = petro_h [ new_nir_filter_index ] filtered_petro_k = petro_k [ new_nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ new_nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ new_nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), \\ np . max ( filtered_petro_j ) \\ + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), \\ np . max ( filtered_petro_h ) \\ + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), \\ np . max ( filtered_petro_k ) \\ + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec else : print ( \"\" ) print ( 'Number of sources in the NIR data = ' , len ( nir_filter_index )) print ( \"\" ) filtered_petro_j = petro_j [ nir_filter_index ] e_petro_h = e_petro_h [ nir_filter_index ] filtered_petro_h = petro_h [ nir_filter_index ] e_petro_k = e_petro_k [ nir_filter_index ] filtered_petro_k = petro_k [ nir_filter_index ] e_petro_j = e_petro_j [ nir_filter_index ] filtered_ukidss_ra = ukidss_ra [ nir_filter_index ] filtered_ukidss_dec = ukidss_dec [ nir_filter_index ] binwidth = 0.5 binsj = np . arange ( np . min ( filtered_petro_j ), np . max ( filtered_petro_j ) + binwidth , binwidth ) binsh = np . arange ( np . min ( filtered_petro_h ), np . max ( filtered_petro_h ) + binwidth , binwidth ) binsk = np . arange ( np . min ( filtered_petro_k ), np . max ( filtered_petro_k ) + binwidth , binwidth ) plt . clf () plt . hist ( filtered_petro_j , bins = binsj , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = 'Observed J' ) plt . hist ( filtered_petro_h , bins = binsh , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = 'Observed H' ) plt . hist ( filtered_petro_k , bins = binsk , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = 'Observed K' ) plt . xlabel ( 'petro magnitudes' ) plt . ylabel ( 'Bins' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'hist_ukidss_nir.png' ) plt . clf () nir_data = filtered_petro_j , filtered_petro_h , filtered_petro_k , \\ e_petro_j , e_petro_h , e_petro_k , filtered_ukidss_ra , filtered_ukidss_dec return nir_data","title":"read_nir_data()"},{"location":"apireference/#irgsctool._read_data.ReadData.read_optical_data","text":"Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. Source code in irgsctool/_read_data.pydef read_optical_data ( self ): \"\"\" Reads the input optical PANSTARRS data. The number of columns are 32. Returns the input optical data with nan values removed (if present) and restricts the data to the sources having SNR >= 5. This data is then fed to the Star-Galaxy classification routine to seperate stars and galaxies in the data. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) file_name = 'PS1' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) try : ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) except FileNotFoundError : self . gd . get_panstarrs_data () ps1_data = np . genfromtxt ( str ( file_name ) + '.csv' , \\ delimiter = ',' , skip_header = 1 ) ps1_objid = ps1_data [:, 0 ] ps_ra = ps1_data [:, 1 ] err_ps_ra = ps1_data [:, 2 ] ps_dec = ps1_data [:, 3 ] err_ps_dec = ps1_data [:, 4 ] gmag = ps1_data [:, 5 ] e_gmag = ps1_data [:, 6 ] gkron = ps1_data [:, 7 ] e_gkron = ps1_data [:, 8 ] rmag = ps1_data [:, 9 ] e_rmag = ps1_data [:, 10 ] rkron = ps1_data [:, 11 ] e_rkron = ps1_data [:, 12 ] imag = ps1_data [:, 13 ] e_imag = ps1_data [:, 14 ] ikron = ps1_data [:, 15 ] e_ikron = ps1_data [:, 16 ] zmag = ps1_data [:, 17 ] e_zmag = ps1_data [:, 18 ] zkron = ps1_data [:, 19 ] e_zkron = ps1_data [:, 20 ] ymag = ps1_data [:, 21 ] e_ymag = ps1_data [:, 22 ] ykron = ps1_data [:, 23 ] e_ykron = ps1_data [:, 24 ] objinfoflag = ps1_data [:, 25 ] qualityflag = ps1_data [:, 26 ] ndetections = ps1_data [:, 27 ] nstackdetections = ps1_data [:, 28 ] ginfoflag = ps1_data [:, 29 ] ginfoflag2 = ps1_data [:, 30 ] ginfoflag3 = ps1_data [:, 31 ] rinfoflag = ps1_data [:, 32 ] rinfoflag2 = ps1_data [:, 33 ] rinfoflag3 = ps1_data [:, 34 ] iinfoflag = ps1_data [:, 35 ] iinfoflag2 = ps1_data [:, 36 ] iinfoflag3 = ps1_data [:, 37 ] zinfoflag = ps1_data [:, 38 ] zinfoflag2 = ps1_data [:, 39 ] zinfoflag3 = ps1_data [:, 40 ] yinfoflag = ps1_data [:, 41 ] yinfoflag2 = ps1_data [:, 42 ] yinfoflag3 = ps1_data [:, 43 ] ps1_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gmag , \\ e_gmag , gkron , e_gkron , rmag , e_rmag , rkron , e_rkron , imag , \\ e_imag , ikron , e_ikron , zmag , e_zmag , zkron , e_zkron , ymag , \\ e_ymag , ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , \\ yinfoflag3 print ( 'Number of rows in the PANSTARRS file:' , \\ len ( ps1_objid )) oid1 = np . array ([ list ( set ( ps1_objid ))])[ 0 ] oid1 = [ * set ( ps1_objid )] ptsf = [] for i in range ( len ( oid1 )): ptsi = np . where ( oid1 [ i ] == ps1_objid )[ 0 ] if len ( ptsi ) > 1.0 : ptsi = ptsi [ 0 ] ptsf = np . append ( ptsf , ptsi ) ptsf = np . int64 ( ptsf ) else : ptsf = np . append ( ptsf , ptsi ) ps1_objid = ps1_objid [ ptsf ] ps_ra = ps_ra [ ptsf ] ps_dec = ps_dec [ ptsf ] err_ps_ra = err_ps_ra [ ptsf ] err_ps_dec = err_ps_dec [ ptsf ] gmag = gmag [ ptsf ] gkron = gkron [ ptsf ] e_gmag = e_gmag [ ptsf ] e_gkron = e_gkron [ ptsf ] rmag = rmag [ ptsf ] rkron = rkron [ ptsf ] e_rmag = e_rmag [ ptsf ] e_rkron = e_rkron [ ptsf ] imag = imag [ ptsf ] ikron = ikron [ ptsf ] e_imag = e_imag [ ptsf ] e_ikron = e_ikron [ ptsf ] zmag = zmag [ ptsf ] zkron = zkron [ ptsf ] e_zmag = e_zmag [ ptsf ] e_zkron = e_zkron [ ptsf ] ymag = ymag [ ptsf ] ykron = ykron [ ptsf ] e_ymag = e_ymag [ ptsf ] e_ykron = e_ykron [ ptsf ] objinfoflag = objinfoflag [ ptsf ] qualityflag = qualityflag [ ptsf ] ndetections = ndetections [ ptsf ] nstackdetections = nstackdetections [ ptsf ] ginfoflag = ginfoflag [ ptsf ] ginfoflag2 = ginfoflag2 [ ptsf ] ginfoflag3 = ginfoflag3 [ ptsf ] rinfoflag = rinfoflag [ ptsf ] rinfoflag2 = rinfoflag2 [ ptsf ] rinfoflag3 = rinfoflag3 [ ptsf ] iinfoflag = iinfoflag [ ptsf ] iinfoflag2 = iinfoflag2 [ ptsf ] iinfoflag3 = iinfoflag3 [ ptsf ] zinfoflag = zinfoflag [ ptsf ] zinfoflag2 = zinfoflag2 [ ptsf ] zinfoflag3 = zinfoflag3 [ ptsf ] yinfoflag = yinfoflag [ ptsf ] yinfoflag2 = yinfoflag2 [ ptsf ] yinfoflag3 = yinfoflag3 [ ptsf ] print ( \"\" ) print ( 'Now filtering the optical data for nan values' ) print ( \"\" ) print ( 'Number of sources in the PANSTARRS data:' , \\ len ( ps1_objid )) print ( \"\" ) indices_only_ifilered = np . where ( imag != - 999 )[ 0 ] binwidth = 0.5 bins = np . arange ( np . min ( imag [ indices_only_ifilered ]), \\ np . max ( imag [ indices_only_ifilered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( imag [ indices_only_ifilered ], bins = bins , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . xlabel ( 'Only $i_ {mag} $ observations' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_only_imag_in_panstarrs_data.png' ) plt . clf () indices_all_filtered = np . where (( gmag != - 999 ) & ( imag != - 999 ) & \\ ( rmag != - 999 ) & ( zmag != - 999 ) & \\ ( ymag != - 999 ) & ( e_gmag != - 999 ) & \\ ( e_rmag != - 999 ) & ( e_imag != - 999 ) & \\ ( e_zmag != - 999 ) & ( e_ymag != - 999 ) & \\ ( gkron != - 999 ) & ( ikron != - 999 ) & \\ ( zkron != - 999 ) & ( ykron != - 999 ) & \\ ( rkron != - 999 ) & ( e_gmag < 0.2 ) & \\ ( e_rmag < 0.2 ) & ( e_imag < 0.2 ) & \\ ( e_zmag < 0.2 ) & ( e_ymag < 0.2 ))[ 0 ] print ( 'Number of sources having detections in five optical bands=' , \\ len ( indices_all_filtered )) binwidth = 0.5 bins_g = np . arange ( np . min ( gmag [ indices_all_filtered ]), \\ np . max ( gmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_r = np . arange ( np . min ( rmag [ indices_all_filtered ]), \\ np . max ( rmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_i = np . arange ( np . min ( imag [ indices_all_filtered ]), \\ np . max ( imag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_z = np . arange ( np . min ( zmag [ indices_all_filtered ]), \\ np . max ( zmag [ indices_all_filtered ]) + \\ binwidth , binwidth ) bins_y = np . arange ( np . min ( ymag [ indices_all_filtered ]), \\ np . max ( ymag [ indices_all_filtered ]) + \\ binwidth , binwidth ) plt . clf () plt . hist ( gmag [ indices_all_filtered ], bins = bins_g , \\ facecolor = 'white' , edgecolor = 'red' , \\ linestyle = '--' , label = '$g_ {mag} $' ) plt . hist ( rmag [ indices_all_filtered ], bins = bins_r , \\ facecolor = 'white' , edgecolor = 'blue' , \\ linestyle = '--' , label = '$r_ {mag} $' ) plt . hist ( imag [ indices_all_filtered ], bins = bins_i , \\ facecolor = 'white' , edgecolor = 'green' , \\ linestyle = '--' , label = '$i_ {mag} $' ) plt . hist ( zmag [ indices_all_filtered ], bins = bins_z , \\ facecolor = 'white' , edgecolor = 'orange' , \\ linestyle = '--' , label = '$z_ {mag} $' ) plt . hist ( ymag [ indices_all_filtered ], bins = bins_y , \\ facecolor = 'white' , edgecolor = 'purple' , \\ linestyle = '--' , label = '$y_ {mag} $' ) plt . xlabel ( 'PANSTARRS observed data' ) plt . legend ( loc = 'best' ) plt . grid () plt . savefig ( 'hist_panstarrs_data.png' ) plt . clf () raw_optical_data = ps1_objid [ indices_all_filtered ], \\ ps_ra [ indices_all_filtered ], err_ps_ra [ indices_all_filtered ], \\ ps_dec [ indices_all_filtered ], err_ps_dec [ indices_all_filtered ], \\ gmag [ indices_all_filtered ], e_gmag [ indices_all_filtered ], \\ gkron [ indices_all_filtered ], e_gkron [ indices_all_filtered ], \\ rmag [ indices_all_filtered ], e_rmag [ indices_all_filtered ], \\ rkron [ indices_all_filtered ], e_rkron [ indices_all_filtered ], \\ imag [ indices_all_filtered ], e_imag [ indices_all_filtered ], \\ ikron [ indices_all_filtered ], e_ikron [ indices_all_filtered ], \\ zmag [ indices_all_filtered ], e_zmag [ indices_all_filtered ], \\ zkron [ indices_all_filtered ], e_zkron [ indices_all_filtered ], \\ ymag [ indices_all_filtered ], e_ymag [ indices_all_filtered ], \\ ykron [ indices_all_filtered ], e_ykron [ indices_all_filtered ], \\ objinfoflag [ indices_all_filtered ], qualityflag [ indices_all_filtered ], \\ ndetections [ indices_all_filtered ], nstackdetections [ indices_all_filtered ], \\ ginfoflag [ indices_all_filtered ], ginfoflag2 [ indices_all_filtered ], \\ ginfoflag3 [ indices_all_filtered ], rinfoflag [ indices_all_filtered ], \\ rinfoflag2 [ indices_all_filtered ], rinfoflag3 [ indices_all_filtered ], \\ iinfoflag [ indices_all_filtered ], iinfoflag2 [ indices_all_filtered ], \\ iinfoflag3 [ indices_all_filtered ], zinfoflag [ indices_all_filtered ], \\ zinfoflag2 [ indices_all_filtered ], zinfoflag3 [ indices_all_filtered ], \\ yinfoflag [ indices_all_filtered ], yinfoflag2 [ indices_all_filtered ], \\ yinfoflag3 [ indices_all_filtered ] return raw_optical_data","title":"read_optical_data()"},{"location":"apireference/#irgsctool._sgc.StarGalaxyClassification","text":"Class contains star_galaxy_classification() object which is used to seperate the stars and galaxies in the PANSTARRS optical data. Source code in irgsctool/_sgc.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class StarGalaxyClassification (): \"\"\" Class contains star_galaxy_classification() object which is used to seperate the stars and galaxies in the PANSTARRS optical data. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def star_galaxy_classification ( self ): \"\"\" Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. \"\"\" print ( \"\" ) print ( \"#######################################################################\" ) print ( 'Seperating Stars and Galaxies from the input optical PANSTARRS dataset' ) print ( \"\" ) print ( \"#######################################################################\" ) ps_phot = self . rd . read_optical_data () print ( \"\" ) print ( 'Using psf-kron criteria to seperate stars and galaxies' ) print ( \"\" ) ps1_objid , ps_ra , e_ps_ra , ps_dec , e_ps_dec , gpsf , e_gpsf , gkron , e_gkron , rpsf , e_rpsf , rkron , e_rkron , \\ ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , \\ objinfoflag , qualityflag , ndetections , nstackdetections , ginfoflag , ginfoflag2 , \\ ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot print ( 'Length of the PS1 data before SGC is:' , len ( ps1_objid )) print ( '' ) sgc_index = np . where (( gpsf - gkron < 0.05 ) & ( rpsf - rkron < 0.05 ) & ( ipsf - ikron < 0.05 ) & \\ ( zpsf - zkron < 0.05 ) & ( ypsf - ykron < 0.05 ))[ 0 ] galaxy_index = np . where (( gpsf - gkron > 0.05 ) & ( rpsf - rkron > 0.05 ) & ( ipsf - ikron > 0.05 ) & \\ ( zpsf - zkron > 0.05 ) & ( ypsf - ykron > 0.05 ))[ 0 ] print ( 'Number of probable stellar sources =' + ' ' + str ( len ( sgc_index )) + ' ' + 'and number of extended sources = ' + str ( len ( ipsf ) - len ( sgc_index ))) print ( \"\" ) print ( 'Now plotting the (g-r) vs (r-i) CCD which shows stars in a locus and galaxies as random respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter (( gpsf [ sgc_index ] - rpsf [ sgc_index ]), ( rpsf [ sgc_index ] - ipsf [ sgc_index ]), \\ s = 5 , color = 'm' , alpha = 0.3 , label = 'stellar sources' ) plt . scatter (( gpsf [ galaxy_index ] - rpsf [ galaxy_index ]), ( rpsf [ galaxy_index ] - ipsf [ galaxy_index ]), \\ s = 5 , color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$(g-r)$' ) plt . ylabel ( '$(r-i)$' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'ccd_stars_and_galaxies_seperated.png' ) plt . clf () print ( 'Plotting the (ipsf-ikron) vs (ikron) scatter plot which shows stars and galaxies as magenta and black points respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter ( ipsf [ sgc_index ], ( ipsf [ sgc_index ] - ikron [ sgc_index ]), s = 5 , color = 'm' , alpha = 0.3 , \\ label = 'stellar sources' ) plt . scatter ( ipsf [ galaxy_index ], ( ipsf [ galaxy_index ] - ikron [ galaxy_index ]), s = 5 , \\ color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$i_ {psf} $' ) plt . ylabel ( '$i_ {psf} -i_ {kron} $' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'psf_vs_kron_stars_and_galaxies_seperated.png' ) plt . clf () ps_phot = ps1_objid [ sgc_index ], ps_ra [ sgc_index ], e_ps_ra [ sgc_index ], ps_dec [ sgc_index ], \\ e_ps_dec [ sgc_index ], gpsf [ sgc_index ], e_gpsf [ sgc_index ], gkron [ sgc_index ], e_gkron [ sgc_index ], \\ rpsf [ sgc_index ], e_rpsf [ sgc_index ], rkron [ sgc_index ], e_rkron [ sgc_index ], ipsf [ sgc_index ], \\ e_ipsf [ sgc_index ], ikron [ sgc_index ], e_ikron [ sgc_index ], zpsf [ sgc_index ], e_zpsf [ sgc_index ], \\ zkron [ sgc_index ], e_zkron [ sgc_index ], ypsf [ sgc_index ], e_ypsf [ sgc_index ], ykron [ sgc_index ], \\ e_ykron [ sgc_index ], objinfoflag [ sgc_index ], qualityflag [ sgc_index ], ndetections [ sgc_index ], \\ nstackdetections [ sgc_index ], ginfoflag [ sgc_index ], ginfoflag2 [ sgc_index ], \\ ginfoflag3 [ sgc_index ], rinfoflag [ sgc_index ], rinfoflag2 [ sgc_index ], rinfoflag3 [ sgc_index ], \\ iinfoflag [ sgc_index ], iinfoflag2 [ sgc_index ], iinfoflag3 [ sgc_index ], \\ zinfoflag [ sgc_index ], zinfoflag2 [ sgc_index ], zinfoflag3 [ sgc_index ], \\ yinfoflag [ sgc_index ], yinfoflag2 [ sgc_index ], yinfoflag3 [ sgc_index ] print ( \"#####################################################\" ) print ( 'Created an input optical catalogue of stellar sources' ) print ( \"######################################################\" ) print ( 'Length of PS1 data before sgc is:' , len ( ps1_objid [ sgc_index ])) return ps_phot","title":"StarGalaxyClassification"},{"location":"apireference/#irgsctool._sgc.StarGalaxyClassification.star_galaxy_classification","text":"Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. Source code in irgsctool/_sgc.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def star_galaxy_classification ( self ): \"\"\" Function to seperate stars and galaxies using the (psf-kron) method applied to all the five optical filters. \"\"\" print ( \"\" ) print ( \"#######################################################################\" ) print ( 'Seperating Stars and Galaxies from the input optical PANSTARRS dataset' ) print ( \"\" ) print ( \"#######################################################################\" ) ps_phot = self . rd . read_optical_data () print ( \"\" ) print ( 'Using psf-kron criteria to seperate stars and galaxies' ) print ( \"\" ) ps1_objid , ps_ra , e_ps_ra , ps_dec , e_ps_dec , gpsf , e_gpsf , gkron , e_gkron , rpsf , e_rpsf , rkron , e_rkron , \\ ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , \\ objinfoflag , qualityflag , ndetections , nstackdetections , ginfoflag , ginfoflag2 , \\ ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , \\ zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot print ( 'Length of the PS1 data before SGC is:' , len ( ps1_objid )) print ( '' ) sgc_index = np . where (( gpsf - gkron < 0.05 ) & ( rpsf - rkron < 0.05 ) & ( ipsf - ikron < 0.05 ) & \\ ( zpsf - zkron < 0.05 ) & ( ypsf - ykron < 0.05 ))[ 0 ] galaxy_index = np . where (( gpsf - gkron > 0.05 ) & ( rpsf - rkron > 0.05 ) & ( ipsf - ikron > 0.05 ) & \\ ( zpsf - zkron > 0.05 ) & ( ypsf - ykron > 0.05 ))[ 0 ] print ( 'Number of probable stellar sources =' + ' ' + str ( len ( sgc_index )) + ' ' + 'and number of extended sources = ' + str ( len ( ipsf ) - len ( sgc_index ))) print ( \"\" ) print ( 'Now plotting the (g-r) vs (r-i) CCD which shows stars in a locus and galaxies as random respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter (( gpsf [ sgc_index ] - rpsf [ sgc_index ]), ( rpsf [ sgc_index ] - ipsf [ sgc_index ]), \\ s = 5 , color = 'm' , alpha = 0.3 , label = 'stellar sources' ) plt . scatter (( gpsf [ galaxy_index ] - rpsf [ galaxy_index ]), ( rpsf [ galaxy_index ] - ipsf [ galaxy_index ]), \\ s = 5 , color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$(g-r)$' ) plt . ylabel ( '$(r-i)$' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'ccd_stars_and_galaxies_seperated.png' ) plt . clf () print ( 'Plotting the (ipsf-ikron) vs (ikron) scatter plot which shows stars and galaxies as magenta and black points respectively' ) print ( \"\" ) plt . clf () plt . figure ( figsize = ( 10 , 10 )) plt . scatter ( ipsf [ sgc_index ], ( ipsf [ sgc_index ] - ikron [ sgc_index ]), s = 5 , color = 'm' , alpha = 0.3 , \\ label = 'stellar sources' ) plt . scatter ( ipsf [ galaxy_index ], ( ipsf [ galaxy_index ] - ikron [ galaxy_index ]), s = 5 , \\ color = 'k' , alpha = 0.3 , label = 'extended sources' ) plt . xlabel ( '$i_ {psf} $' ) plt . ylabel ( '$i_ {psf} -i_ {kron} $' ) plt . grid () plt . legend ( loc = 'best' ) plt . savefig ( 'psf_vs_kron_stars_and_galaxies_seperated.png' ) plt . clf () ps_phot = ps1_objid [ sgc_index ], ps_ra [ sgc_index ], e_ps_ra [ sgc_index ], ps_dec [ sgc_index ], \\ e_ps_dec [ sgc_index ], gpsf [ sgc_index ], e_gpsf [ sgc_index ], gkron [ sgc_index ], e_gkron [ sgc_index ], \\ rpsf [ sgc_index ], e_rpsf [ sgc_index ], rkron [ sgc_index ], e_rkron [ sgc_index ], ipsf [ sgc_index ], \\ e_ipsf [ sgc_index ], ikron [ sgc_index ], e_ikron [ sgc_index ], zpsf [ sgc_index ], e_zpsf [ sgc_index ], \\ zkron [ sgc_index ], e_zkron [ sgc_index ], ypsf [ sgc_index ], e_ypsf [ sgc_index ], ykron [ sgc_index ], \\ e_ykron [ sgc_index ], objinfoflag [ sgc_index ], qualityflag [ sgc_index ], ndetections [ sgc_index ], \\ nstackdetections [ sgc_index ], ginfoflag [ sgc_index ], ginfoflag2 [ sgc_index ], \\ ginfoflag3 [ sgc_index ], rinfoflag [ sgc_index ], rinfoflag2 [ sgc_index ], rinfoflag3 [ sgc_index ], \\ iinfoflag [ sgc_index ], iinfoflag2 [ sgc_index ], iinfoflag3 [ sgc_index ], \\ zinfoflag [ sgc_index ], zinfoflag2 [ sgc_index ], zinfoflag3 [ sgc_index ], \\ yinfoflag [ sgc_index ], yinfoflag2 [ sgc_index ], yinfoflag3 [ sgc_index ] print ( \"#####################################################\" ) print ( 'Created an input optical catalogue of stellar sources' ) print ( \"######################################################\" ) print ( 'Length of PS1 data before sgc is:' , len ( ps1_objid [ sgc_index ])) return ps_phot Module to generate extinction corrected photometry. This model is dependant on dustmaps package and makes use of dustmaps.sfd","title":"star_galaxy_classification()"},{"location":"apireference/#irgsctool._extinction_correction.ExtinctionCorrection","text":"This module has two functions: 1. 'get_reddening': which uses \"dustmaps\" python package to obtain the Schegel et.al. 1998 reddening map. This value of reddening is converted to Schafly & Finkbeiner 2011 value by scaling the original value by 0.86. aj, ah and ak are then comnputed by assuming the reddening law constant in J, H and K bands. 2. 'extinction_corrected_photometry': which computes the optical extinction in PANSTARRS bands by using the relations given by Tonry et.al. 2012. It returns extinction and reddening corrected PANSTARRS photometry. Source code in irgsctool/_extinction_correction.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class ExtinctionCorrection (): \"\"\" This module has two functions: 1. 'get_reddening': which uses \"dustmaps\" python package to obtain the Schegel et.al. 1998 reddening map. This value of reddening is converted to Schafly & Finkbeiner 2011 value by scaling the original value by 0.86. aj, ah and ak are then comnputed by assuming the reddening law constant in J, H and K bands. 2. 'extinction_corrected_photometry': which computes the optical extinction in PANSTARRS bands by using the relations given by Tonry et.al. 2012. It returns extinction and reddening corrected PANSTARRS photometry. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . sgc = sgc ( ra , dec ) def get_reddening ( self ): \"\"\" Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd \"\"\" try : coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv except FileNotFoundError : dustmaps . sfd . fetch () coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv return snf_ebv , err_snf_ebv , aj , ah , ak def extinction_corrected_photometry ( self ): \"\"\" Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. \"\"\" print ( \"########################################\" ) print ( \"\" ) print ( 'Correcting the optical photometry of the probable stellar sources for extinction.' ) print ( \"\" ) print ( \"########################################\" ) print ( \"\" ) ebv , err_ebv , _ , _ , _ = self . get_reddening () ps_phot = self . sgc . star_galaxy_classification () print ( '' ) print ( 'Length of PS1 data before ec is:' , len ( ps_phot [ 0 ])) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gpsf , e_gpsf , gkron , e_gkron , \\ rpsf , e_rpsf , rkron , e_rkron , ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , \\ zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot #extinction in ps1 filters taken from Tonry et.al. 2012 ag = ( ebv ) * 0.88 * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.01 * ( gpsf - ipsf ) ** 2 ) ar = ( ebv ) * 0.88 * ( 2.585 - 0.0315 * ( gpsf - ipsf )) ai = ( ebv ) * 0.88 * ( 1.908 - 0.0152 * ( gpsf - ipsf )) az = ( ebv ) * 0.88 * ( 1.499 - 0.0023 * ( gpsf - ipsf )) ay = ( ebv ) * 0.88 * ( 1.251 - 0.0027 * ( gpsf - ipsf )) e_gi = np . sqrt ( e_gpsf ** 2 + e_ipsf ** 2 ) #error in extinction e_ag = (( err_ebv ) * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.02 * ( gpsf - ipsf ) ** 2 )) + \\ (( ebv ) * (( - 0.0972 * e_gi ) + ( 0.02 * ( gpsf - ipsf ) * e_gi ))) e_ar = ( err_ebv ) * ( 2.585 - 0.0315 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0315 * e_gi ) e_ai = ( err_ebv ) * ( 1.908 - 0.0152 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0152 * e_gi ) e_az = ( err_ebv ) * ( 1.499 - 0.0023 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0023 * e_gi ) e_ay = ( err_ebv ) * ( 1.251 - 0.0027 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0027 * e_gi ) #\"ec_\" stands for extinction corrected magnitudes ec_gmag = gpsf - ag ec_rmag = rpsf - ar ec_imag = ipsf - ai ec_zmag = zpsf - az ec_ymag = ypsf - ay #e_ec_ stands for error in extinction corrected magnitudes e_ec_gmag = np . sqrt (( e_gpsf ) ** 2 + ( e_ag ) ** 2 ) e_ec_rmag = np . sqrt (( e_rpsf ) ** 2 + ( e_ar ) ** 2 ) e_ec_imag = np . sqrt (( e_ipsf ) ** 2 + ( e_ai ) ** 2 ) e_ec_zmag = np . sqrt (( e_zpsf ) ** 2 + ( e_az ) ** 2 ) e_ec_ymag = np . sqrt (( e_ypsf ) ** 2 + ( e_ay ) ** 2 ) psf_phot = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , \\ ec_gmag , e_ec_gmag , gkron , e_gkron , ec_rmag , e_ec_rmag , \\ rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , \\ ec_zmag , e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , \\ ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , \\ rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , \\ iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , \\ yinfoflag2 , yinfoflag3 print ( 'length of ps1 data after ec is:' , len ( psf_phot [ 0 ])) return psf_phot","title":"ExtinctionCorrection"},{"location":"apireference/#irgsctool._extinction_correction.ExtinctionCorrection.extinction_corrected_photometry","text":"Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. Source code in irgsctool/_extinction_correction.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def extinction_corrected_photometry ( self ): \"\"\" Function to correct the input optical photometry for reddening and extinction along the line of site. Returns extinction corrected PANSTARRS optical photometry. \"\"\" print ( \"########################################\" ) print ( \"\" ) print ( 'Correcting the optical photometry of the probable stellar sources for extinction.' ) print ( \"\" ) print ( \"########################################\" ) print ( \"\" ) ebv , err_ebv , _ , _ , _ = self . get_reddening () ps_phot = self . sgc . star_galaxy_classification () print ( '' ) print ( 'Length of PS1 data before ec is:' , len ( ps_phot [ 0 ])) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , gpsf , e_gpsf , gkron , e_gkron , \\ rpsf , e_rpsf , rkron , e_rkron , ipsf , e_ipsf , ikron , e_ikron , zpsf , e_zpsf , \\ zkron , e_zkron , ypsf , e_ypsf , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , \\ rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = ps_phot #extinction in ps1 filters taken from Tonry et.al. 2012 ag = ( ebv ) * 0.88 * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.01 * ( gpsf - ipsf ) ** 2 ) ar = ( ebv ) * 0.88 * ( 2.585 - 0.0315 * ( gpsf - ipsf )) ai = ( ebv ) * 0.88 * ( 1.908 - 0.0152 * ( gpsf - ipsf )) az = ( ebv ) * 0.88 * ( 1.499 - 0.0023 * ( gpsf - ipsf )) ay = ( ebv ) * 0.88 * ( 1.251 - 0.0027 * ( gpsf - ipsf )) e_gi = np . sqrt ( e_gpsf ** 2 + e_ipsf ** 2 ) #error in extinction e_ag = (( err_ebv ) * ( 3.613 - 0.0972 * ( gpsf - ipsf ) + 0.02 * ( gpsf - ipsf ) ** 2 )) + \\ (( ebv ) * (( - 0.0972 * e_gi ) + ( 0.02 * ( gpsf - ipsf ) * e_gi ))) e_ar = ( err_ebv ) * ( 2.585 - 0.0315 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0315 * e_gi ) e_ai = ( err_ebv ) * ( 1.908 - 0.0152 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0152 * e_gi ) e_az = ( err_ebv ) * ( 1.499 - 0.0023 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0023 * e_gi ) e_ay = ( err_ebv ) * ( 1.251 - 0.0027 * ( gpsf - ipsf )) + ( ebv ) * ( - 0.0027 * e_gi ) #\"ec_\" stands for extinction corrected magnitudes ec_gmag = gpsf - ag ec_rmag = rpsf - ar ec_imag = ipsf - ai ec_zmag = zpsf - az ec_ymag = ypsf - ay #e_ec_ stands for error in extinction corrected magnitudes e_ec_gmag = np . sqrt (( e_gpsf ) ** 2 + ( e_ag ) ** 2 ) e_ec_rmag = np . sqrt (( e_rpsf ) ** 2 + ( e_ar ) ** 2 ) e_ec_imag = np . sqrt (( e_ipsf ) ** 2 + ( e_ai ) ** 2 ) e_ec_zmag = np . sqrt (( e_zpsf ) ** 2 + ( e_az ) ** 2 ) e_ec_ymag = np . sqrt (( e_ypsf ) ** 2 + ( e_ay ) ** 2 ) psf_phot = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , \\ ec_gmag , e_ec_gmag , gkron , e_gkron , ec_rmag , e_ec_rmag , \\ rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , \\ ec_zmag , e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , \\ ykron , e_ykron , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , \\ rinfoflag , rinfoflag2 , rinfoflag3 , iinfoflag , iinfoflag2 , \\ iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , yinfoflag , \\ yinfoflag2 , yinfoflag3 print ( 'length of ps1 data after ec is:' , len ( psf_phot [ 0 ])) return psf_phot","title":"extinction_corrected_photometry()"},{"location":"apireference/#irgsctool._extinction_correction.ExtinctionCorrection.get_reddening","text":"Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd Source code in irgsctool/_extinction_correction.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get_reddening ( self ): \"\"\" Function to obtain Schelgel et.al. 1998 (sfd) reddening value. This work uses Schlafly & Finkbeiner 2011 (snf) which is: snf = 0.86*sfd \"\"\" try : coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv except FileNotFoundError : dustmaps . sfd . fetch () coords = SkyCoord (( self . ra ) * u . degree , ( self . dec ) \\ * u . degree , frame = 'icrs' ) sfd = SFDQuery () #sfd reddening sfd_ebv = sfd ( coords ) #s&f reddening snf_ebv = sfd_ebv * 0.86 err_snf_ebv = 0.001 * snf_ebv aj = 0.709 * snf_ebv ah = 0.449 * snf_ebv ak = 0.302 * snf_ebv return snf_ebv , err_snf_ebv , aj , ah , ak","title":"get_reddening()"},{"location":"apireference/#irgsctool._sam.Models","text":"Models child class reads and selects the required Kurucz and Phoenix stellar atmospheric models in the generation of IRGSC. Source code in irgsctool/_sam.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Models (): \"\"\" ***Models*** child class reads and selects the required Kurucz and Phoenix stellar atmospheric models in the generation of IRGSC. \"\"\" def __init__ ( self , use_sam = None ): self . sam = use_sam def read_sam_file ( self , use_sam = None ): \"\"\" ***irgsctool.Models.read_sam_file***(use_sam=None) <justify> This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Raises: ValueError if use_sam is None. FileNotFoundError if the model files are not found.</justify> \"\"\" if self . sam == None : raise ValueError ( 'Input not given on which Stellar \\ Atmospheric Models to be used' ) elif self . sam == 'Kurucz' : print ( \"\" ) print ( 'Reading Interpolated Kurucz SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_kurucz.txt' ) except : FileNotFoundError ( 'interpolated_kurucz.txt file not found' ) elif self . sam == 'Phoenix' : print ( \"\" ) print ( 'Reading Interpolated Phoenix SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_phoenix.txt' ) except : FileNotFoundError ( 'interpolated_phoenix.txt not found' ) teff = p2 [:, 0 ] logg = p2 [:, 2 ] feh = p2 [:, 1 ] sam_g = p2 [:, 3 ] sam_r = p2 [:, 4 ] sam_i = p2 [:, 5 ] sam_z = p2 [:, 6 ] sam_y = p2 [:, 7 ] sam_j = p2 [:, 8 ] sam_h = p2 [:, 9 ] sam_k = p2 [:, 10 ] sam_params = teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k self . sam_params = sam_params return sam_params def select_sam_range ( self , teff_range = None , logg_range = None , feh_range = None , use_optimal_method = False ): \"\"\" *** irgsctool.Models.select_sam_range ***(teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) <justify> This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given.</justify> <justify> If *** use_optimal_method *** is set to True, the following range of models is selected:</justify> | Model Name | \\(T_{eff}\\) (K) | log(g) (dex) | [Fe/H] (dex)| | :-------------| :-------------------------| :----------------| :--------------| | Phoenix (C1) | 2800 - 5000 | 3.0 - 5.5 | -5.0 - -1.5| | Phoenix (C2) | 2800 - 4000 | 0.0 - 3.0 | -0.5 - 1.5 | | KuruczCastelli-Kurucz (K0) | 4000 - 10000 | --- | --- | \"\"\" teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k \\ = self . sam_params if use_optimal_method is True : if teff_range is None and logg_range is None and feh_range is None : raise TypeError ( \"Parameter range must be provided in order to use \\ the optimal method\" ) elif teff_range is not None and feh_range is not None and logg_range is not None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ]; \\ logg_lower_limit = logg_range [ 0 ]; logg_upper_limit = logg_range [ - 1 ]; \\ feh_lower_limit = feh_range [ 0 ]; feh_upper_limit = feh_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ) \\ & ( feh > feh_lower_limit ) & ( feh < feh_upper_limit ) \\ & ( logg > logg_lower_limit ) & ( logg < logg_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] elif teff_range is not None and feh_range is None and logg_range is None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] self . selected_params = sam_params return sam_params","title":"Models"},{"location":"apireference/#irgsctool._sam.Models.read_sam_file","text":"irgsctool.Models.read_sam_file (use_sam=None) This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Source code in irgsctool/_sam.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def read_sam_file ( self , use_sam = None ): \"\"\" ***irgsctool.Models.read_sam_file***(use_sam=None) <justify> This function reads the model parameters and results from the interpolated Kurucz or the Phoenix model files. use_sam is bool and decides which model file to be read. To use the interpolated Kurucz models, use_sam ='Kurucz'. Similarly, use_sam = 'Phoenix' to use interpolated Phoenix models. Raises: ValueError if use_sam is None. FileNotFoundError if the model files are not found.</justify> \"\"\" if self . sam == None : raise ValueError ( 'Input not given on which Stellar \\ Atmospheric Models to be used' ) elif self . sam == 'Kurucz' : print ( \"\" ) print ( 'Reading Interpolated Kurucz SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_kurucz.txt' ) except : FileNotFoundError ( 'interpolated_kurucz.txt file not found' ) elif self . sam == 'Phoenix' : print ( \"\" ) print ( 'Reading Interpolated Phoenix SAMs' ) print ( \"\" ) print ( 'data_dir = ' , data_dir ) try : p2 = np . genfromtxt ( str ( data_dir ) + '/data/interpolated_phoenix.txt' ) except : FileNotFoundError ( 'interpolated_phoenix.txt not found' ) teff = p2 [:, 0 ] logg = p2 [:, 2 ] feh = p2 [:, 1 ] sam_g = p2 [:, 3 ] sam_r = p2 [:, 4 ] sam_i = p2 [:, 5 ] sam_z = p2 [:, 6 ] sam_y = p2 [:, 7 ] sam_j = p2 [:, 8 ] sam_h = p2 [:, 9 ] sam_k = p2 [:, 10 ] sam_params = teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k self . sam_params = sam_params return sam_params","title":"read_sam_file()"},{"location":"apireference/#irgsctool._sam.Models.select_sam_range","text":"irgsctool.Models.select_sam_range (teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given. If use_optimal_method is set to True, the following range of models is selected: Model Name \\(T_{eff}\\) (K) log(g) (dex) [Fe/H] (dex) Phoenix (C1) 2800 - 5000 3.0 - 5.5 -5.0 - -1.5 Phoenix (C2) 2800 - 4000 0.0 - 3.0 -0.5 - 1.5 KuruczCastelli-Kurucz (K0) 4000 - 10000 --- --- Source code in irgsctool/_sam.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def select_sam_range ( self , teff_range = None , logg_range = None , feh_range = None , use_optimal_method = False ): \"\"\" *** irgsctool.Models.select_sam_range ***(teff_range=None, logg_range=None, feh_range=None, use_optimal_method=False) <justify> This function selects the range of the models to be used in the generation of IRGSC. Raises: TypreError is use_optimal_method is True and range of parameters is not given.</justify> <justify> If *** use_optimal_method *** is set to True, the following range of models is selected:</justify> | Model Name | \\(T_{eff}\\) (K) | log(g) (dex) | [Fe/H] (dex)| | :-------------| :-------------------------| :----------------| :--------------| | Phoenix (C1) | 2800 - 5000 | 3.0 - 5.5 | -5.0 - -1.5| | Phoenix (C2) | 2800 - 4000 | 0.0 - 3.0 | -0.5 - 1.5 | | KuruczCastelli-Kurucz (K0) | 4000 - 10000 | --- | --- | \"\"\" teff , logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k \\ = self . sam_params if use_optimal_method is True : if teff_range is None and logg_range is None and feh_range is None : raise TypeError ( \"Parameter range must be provided in order to use \\ the optimal method\" ) elif teff_range is not None and feh_range is not None and logg_range is not None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ]; \\ logg_lower_limit = logg_range [ 0 ]; logg_upper_limit = logg_range [ - 1 ]; \\ feh_lower_limit = feh_range [ 0 ]; feh_upper_limit = feh_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ) \\ & ( feh > feh_lower_limit ) & ( feh < feh_upper_limit ) \\ & ( logg > logg_lower_limit ) & ( logg < logg_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] elif teff_range is not None and feh_range is None and logg_range is None : teff_lower_limit = teff_range [ 0 ]; teff_upper_limit = teff_range [ - 1 ] index_sam = np . where (( teff > teff_lower_limit ) & ( teff < teff_upper_limit ))[ 0 ] sam_params = teff [ index_sam ], logg [ index_sam ], feh [ index_sam ], sam_g [ index_sam ], sam_r [ index_sam ], \\ sam_i [ index_sam ], sam_z [ index_sam ], sam_y [ index_sam ], sam_j [ index_sam ], \\ sam_h [ index_sam ], sam_k [ index_sam ] self . selected_params = sam_params return sam_params","title":"select_sam_range()"},{"location":"apireference/#irgsctool._fitting.GenerateIRGSC","text":"The GenerateIRGSC class hosts functions to generates a catalog of probable stellar sources in the PANSTARRS data with their computed magnitudes, astrometric information from GAIA DR3 data, best fitted model parameters and flags. Source code in irgsctool/_fitting.pyclass GenerateIRGSC (): \"\"\" <justify> The <strong> GenerateIRGSC class </strong> hosts functions to generates a catalog of probable stellar sources in the PANSTARRS data with their computed magnitudes, astrometric information from GAIA DR3 data, best fitted model parameters and flags.</justify> \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) self . ec = EC ( ra , dec ) def generate_irgsc ( self , use_optimal_method = True ): \"\"\" `irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True)` <justify> This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). $$ ES = \\\\frac{\\\\int{F_{\\\\lambda}P_{\\\\lambda}{\\\\lambda} d{\\\\lambda}}}{\\\\int{P_{\\\\lambda}{\\\\lambda}d{\\\\lambda}}} $$ The spectra is obtained from pysynphot [More information here](https://pysynphot.readthedocs.io) The model parameters are: $T_{eff}$, log(g) and [Fe/H].</justify> \"\"\" if use_optimal_method is True : print ( \"\" ) print ( '#########################################' ) print ( 'Computing the NIR magnitudes for the sources using the optimal method' ) print ( '#########################################' ) print ( \"\" ) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , gkron , e_gkron , \\ ec_rmag , e_ec_rmag , rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , ec_zmag , \\ e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , \\ yinfoflag , yinfoflag2 , yinfoflag3 = self . ec . extinction_corrected_photometry () _ , _ , aj , ah , ak = self . ec . get_reddening () gaia_data = self . rd . read_gaia_data () gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe = gaia_data k0 = Models ( 'Kurucz' ) k0 . read_sam_file () c1 = Models ( 'Phoenix' ) c1 . read_sam_file () c2 = Models ( 'Phoenix' ) c2 . read_sam_file () model_params_k0 = k0 . select_sam ( teff_range = [ 4000 , 10000 ], logg_range = None , feh_range = None , use_optimal_method = True ) model_params_c1 = c1 . select_sam ( teff_range = [ 2800 , 5000 ], logg_range = [ 3.0 , 5.5 ], feh_range = [ - 5.0 , - 1.5 ], use_optimal_method = True ) model_params_c2 = c2 . select_sam ( teff_range = [ 2800 , 4000 ], logg_range = [ 0.0 , 3.0 ], feh_range = [ - 0.5 , 1.5 ], use_optimal_method = True ) teff_c1 , logg_c1 , feh_c1 , sam_g_c1 , sam_r_c1 , sam_i_c1 , sam_z_c1 , sam_y_c1 , sam_j_c1 , \\ sam_h_c1 , sam_k_c1 = model_params_c1 teff_c2 , logg_c2 , feh_c2 , sam_g_c2 , sam_r_c2 , sam_i_c2 , sam_z_c2 , sam_y_c2 , sam_j_c2 , \\ sam_h_c2 , sam_k_c2 = model_params_c2 teff_k0 , logg_k0 , feh_k0 , sam_g_k0 , sam_r_k0 , sam_i_k0 , sam_z_k0 , sam_y_k0 , sam_j_k0 , \\ sam_h_k0 , sam_k_k0 = model_params_k0 teff = np . concatenate (( teff_c1 , teff_c2 , teff_k0 ), axis = 0 ) logg = np . concatenate (( logg_c1 , logg_c2 , logg_k0 ), axis = 0 ) feh = np . concatenate (( feh_c1 , feh_c2 , feh_k0 ), axis = 0 ) sam_g = np . concatenate (( sam_g_c1 , sam_g_c2 , sam_g_k0 ), axis = 0 ) sam_r = np . concatenate (( sam_r_c1 , sam_r_c2 , sam_r_k0 ), axis = 0 ) sam_i = np . concatenate (( sam_i_c1 , sam_i_c2 , sam_i_k0 ), axis = 0 ) sam_z = np . concatenate (( sam_z_c1 , sam_z_c2 , sam_z_k0 ), axis = 0 ) sam_y = np . concatenate (( sam_y_c1 , sam_y_c2 , sam_y_k0 ), axis = 0 ) sam_j = np . concatenate (( sam_j_c1 , sam_j_c2 , sam_j_k0 ), axis = 0 ) sam_h = np . concatenate (( sam_h_c1 , sam_h_c2 , sam_h_k0 ), axis = 0 ) sam_k = np . concatenate (( sam_k_c1 , sam_k_c2 , sam_k_k0 ), axis = 0 ) sam_gr = sam_g - sam_r sam_ri = sam_r - sam_i sam_gi = sam_g - sam_i sam_gz = sam_g - sam_z sam_gy = sam_g - sam_y sam_ry = sam_r - sam_y sam_rz = sam_r - sam_z sam_iz = sam_i - sam_z sam_iy = sam_i - sam_y sam_zy = sam_z - sam_y observed_colours = ( ec_gmag - ec_rmag ), ( ec_gmag - ec_imag ), \\ ( ec_gmag - ec_rmag ), ( ec_gmag - ec_ymag ), ( ec_rmag - ec_imag ), \\ ( ec_rmag - ec_ymag ), ( ec_rmag - ec_zmag ), ( ec_imag - ec_zmag ), \\ ( ec_imag - ec_ymag ), ( ec_zmag - ec_ymag ) model_colours = sam_gr , sam_gi , sam_gz , sam_gy , sam_ri , sam_rz , \\ sam_ry , sam_iz , sam_iy , sam_zy observed_optical_magnitudes = ec_gmag , ec_rmag , ec_imag , \\ ec_zmag , ec_ymag e_observed_optical_magnitudes = e_ec_gmag , e_ec_rmag , \\ e_ec_imag , e_ec_zmag , e_ec_ymag sam_magnitudes = sam_g , sam_r , sam_i , sam_z , sam_y , \\ sam_j , sam_h , sam_k data = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) \\ . replace ( '.' , '_' ) with open ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , 'w' , encoding = 'UTF8' ) as file1 : writer = csv . writer ( file1 ) writer . writerow ( header ) for j in range ( len ( ec_gmag )): dquad_arr , min_dquad , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ = \\ compute_dquad ( j , oc = observed_colours , mc = model_colours ) min_dquad_element = find_nearest ( dquad_arr , min_dquad ) index_best_fit_sam = np . where ( min_dquad_element == ( dquad_arr ))[ 0 ] sf_avg , sigma_sf , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error = calc_sf ( j , observed_optical_magnitudes , \\ e_observed_optical_magnitudes , \\ sam_magnitudes , index_best_fit_sam , \\ aj , ah , ak ) gaia_angular_seperation = 3600 * np . sqrt ((( ps_ra [ j ] - gaia_ra ) * np . cos ( np . radians ( ps_dec [ j ]))) ** 2 + ( ps_dec [ j ] - gaia_dec ) ** 2 ) index_min_ang_seperation = np . where ( gaia_angular_seperation <= 1.0 )[ 0 ] if len ( index_min_ang_seperation ) > 1.0 : gaia_ang_seperation_selected = gaia_angular_seperation [ index_min_ang_seperation ] min_gaia_ang_seperation = gaia_angular_seperation \\ [ np . where ( np . min ( gaia_ang_seperation_selected ) \\ == gaia_angular_seperation )[ 0 ]] index_min_ang_seperation = np . where ( min_gaia_ang_seperation \\ == gaia_angular_seperation )[ 0 ] data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], \\ err_ps_dec [ j ], ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], \\ e_ec_rmag [ j ], ec_imag [ j ], e_ec_imag [ j ], ec_zmag [ j ], \\ e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], teff [ j ], \\ logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , \\ gaia_source_id [ index_min_ang_seperation ][ 0 ], gaia_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_ra_error [ index_min_ang_seperation ][ 0 ], gaia_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_dec_error [ index_min_ang_seperation ][ 0 ], gaia_parallax [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax_error [ index_min_ang_seperation ][ 0 ], gaia_pm [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra [ index_min_ang_seperation ][ 0 ], gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec [ index_min_ang_seperation ][ 0 ], gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_ruwe [ index_min_ang_seperation ][ 0 ], objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], \\ nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], \\ rinfoflag3 [ j ], iinfoflag [ j ], iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], \\ zinfoflag3 [ j ], yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 0.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , - 999 , - 999 , - 999 , \\ - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , objinfoflag [ j ], \\ qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], \\ ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], \\ yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 1.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , gaia_source_id [ index_min_ang_seperation ][ 0 ], \\ gaia_ra [ index_min_ang_seperation ][ 0 ], gaia_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_dec [ index_min_ang_seperation ][ 0 ], gaia_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax [ index_min_ang_seperation ][ 0 ], gaia_parallax_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm [ index_min_ang_seperation ][ 0 ], gaia_pm_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], gaia_pm_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], gaia_ruwe [ index_min_ang_seperation ][ 0 ], \\ objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], \\ ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], yinfoflag [ j ], \\ iinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) return data","title":"GenerateIRGSC"},{"location":"apireference/#irgsctool._fitting.GenerateIRGSC.generate_irgsc","text":"irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True) This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). \\[ ES = \\frac{\\int{F_{\\lambda}P_{\\lambda}{\\lambda} d{\\lambda}}}{\\int{P_{\\lambda}{\\lambda}d{\\lambda}}} \\] The spectra is obtained from pysynphot More information here The model parameters are: \\(T_{eff}\\) , log(g) and [Fe/H]. Source code in irgsctool/_fitting.pydef generate_irgsc ( self , use_optimal_method = True ): \"\"\" `irgsctool.GenerateIRGSC.generate_irgsc***(use_optimal_method=True)` <justify> This function finds the best fitting model to the observed colors of the stellar source. The best fitting model is chosen from a combination of Kurucz/Castelli-Kurucz and Phoenix synthetic spectra convolved with the PANSTARRS response function (or BANDPASS) which is integrated w.r.t. the wavelength and normalised to the product of the PANSTARRS response function and wavelength. This is also called as Effective Stimulus (ES). $$ ES = \\\\frac{\\\\int{F_{\\\\lambda}P_{\\\\lambda}{\\\\lambda} d{\\\\lambda}}}{\\\\int{P_{\\\\lambda}{\\\\lambda}d{\\\\lambda}}} $$ The spectra is obtained from pysynphot [More information here](https://pysynphot.readthedocs.io) The model parameters are: $T_{eff}$, log(g) and [Fe/H].</justify> \"\"\" if use_optimal_method is True : print ( \"\" ) print ( '#########################################' ) print ( 'Computing the NIR magnitudes for the sources using the optimal method' ) print ( '#########################################' ) print ( \"\" ) ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , gkron , e_gkron , \\ ec_rmag , e_ec_rmag , rkron , e_rkron , ec_imag , e_ec_imag , ikron , e_ikron , ec_zmag , \\ e_ec_zmag , zkron , e_zkron , ec_ymag , e_ec_ymag , ykron , e_ykron , objinfoflag , qualityflag , \\ ndetections , nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , zinfoflag3 , \\ yinfoflag , yinfoflag2 , yinfoflag3 = self . ec . extinction_corrected_photometry () _ , _ , aj , ah , ak = self . ec . get_reddening () gaia_data = self . rd . read_gaia_data () gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe = gaia_data k0 = Models ( 'Kurucz' ) k0 . read_sam_file () c1 = Models ( 'Phoenix' ) c1 . read_sam_file () c2 = Models ( 'Phoenix' ) c2 . read_sam_file () model_params_k0 = k0 . select_sam ( teff_range = [ 4000 , 10000 ], logg_range = None , feh_range = None , use_optimal_method = True ) model_params_c1 = c1 . select_sam ( teff_range = [ 2800 , 5000 ], logg_range = [ 3.0 , 5.5 ], feh_range = [ - 5.0 , - 1.5 ], use_optimal_method = True ) model_params_c2 = c2 . select_sam ( teff_range = [ 2800 , 4000 ], logg_range = [ 0.0 , 3.0 ], feh_range = [ - 0.5 , 1.5 ], use_optimal_method = True ) teff_c1 , logg_c1 , feh_c1 , sam_g_c1 , sam_r_c1 , sam_i_c1 , sam_z_c1 , sam_y_c1 , sam_j_c1 , \\ sam_h_c1 , sam_k_c1 = model_params_c1 teff_c2 , logg_c2 , feh_c2 , sam_g_c2 , sam_r_c2 , sam_i_c2 , sam_z_c2 , sam_y_c2 , sam_j_c2 , \\ sam_h_c2 , sam_k_c2 = model_params_c2 teff_k0 , logg_k0 , feh_k0 , sam_g_k0 , sam_r_k0 , sam_i_k0 , sam_z_k0 , sam_y_k0 , sam_j_k0 , \\ sam_h_k0 , sam_k_k0 = model_params_k0 teff = np . concatenate (( teff_c1 , teff_c2 , teff_k0 ), axis = 0 ) logg = np . concatenate (( logg_c1 , logg_c2 , logg_k0 ), axis = 0 ) feh = np . concatenate (( feh_c1 , feh_c2 , feh_k0 ), axis = 0 ) sam_g = np . concatenate (( sam_g_c1 , sam_g_c2 , sam_g_k0 ), axis = 0 ) sam_r = np . concatenate (( sam_r_c1 , sam_r_c2 , sam_r_k0 ), axis = 0 ) sam_i = np . concatenate (( sam_i_c1 , sam_i_c2 , sam_i_k0 ), axis = 0 ) sam_z = np . concatenate (( sam_z_c1 , sam_z_c2 , sam_z_k0 ), axis = 0 ) sam_y = np . concatenate (( sam_y_c1 , sam_y_c2 , sam_y_k0 ), axis = 0 ) sam_j = np . concatenate (( sam_j_c1 , sam_j_c2 , sam_j_k0 ), axis = 0 ) sam_h = np . concatenate (( sam_h_c1 , sam_h_c2 , sam_h_k0 ), axis = 0 ) sam_k = np . concatenate (( sam_k_c1 , sam_k_c2 , sam_k_k0 ), axis = 0 ) sam_gr = sam_g - sam_r sam_ri = sam_r - sam_i sam_gi = sam_g - sam_i sam_gz = sam_g - sam_z sam_gy = sam_g - sam_y sam_ry = sam_r - sam_y sam_rz = sam_r - sam_z sam_iz = sam_i - sam_z sam_iy = sam_i - sam_y sam_zy = sam_z - sam_y observed_colours = ( ec_gmag - ec_rmag ), ( ec_gmag - ec_imag ), \\ ( ec_gmag - ec_rmag ), ( ec_gmag - ec_ymag ), ( ec_rmag - ec_imag ), \\ ( ec_rmag - ec_ymag ), ( ec_rmag - ec_zmag ), ( ec_imag - ec_zmag ), \\ ( ec_imag - ec_ymag ), ( ec_zmag - ec_ymag ) model_colours = sam_gr , sam_gi , sam_gz , sam_gy , sam_ri , sam_rz , \\ sam_ry , sam_iz , sam_iy , sam_zy observed_optical_magnitudes = ec_gmag , ec_rmag , ec_imag , \\ ec_zmag , ec_ymag e_observed_optical_magnitudes = e_ec_gmag , e_ec_rmag , \\ e_ec_imag , e_ec_zmag , e_ec_ymag sam_magnitudes = sam_g , sam_r , sam_i , sam_z , sam_y , \\ sam_j , sam_h , sam_k data = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) \\ . replace ( '.' , '_' ) with open ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , 'w' , encoding = 'UTF8' ) as file1 : writer = csv . writer ( file1 ) writer . writerow ( header ) for j in range ( len ( ec_gmag )): dquad_arr , min_dquad , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ = \\ compute_dquad ( j , oc = observed_colours , mc = model_colours ) min_dquad_element = find_nearest ( dquad_arr , min_dquad ) index_best_fit_sam = np . where ( min_dquad_element == ( dquad_arr ))[ 0 ] sf_avg , sigma_sf , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error = calc_sf ( j , observed_optical_magnitudes , \\ e_observed_optical_magnitudes , \\ sam_magnitudes , index_best_fit_sam , \\ aj , ah , ak ) gaia_angular_seperation = 3600 * np . sqrt ((( ps_ra [ j ] - gaia_ra ) * np . cos ( np . radians ( ps_dec [ j ]))) ** 2 + ( ps_dec [ j ] - gaia_dec ) ** 2 ) index_min_ang_seperation = np . where ( gaia_angular_seperation <= 1.0 )[ 0 ] if len ( index_min_ang_seperation ) > 1.0 : gaia_ang_seperation_selected = gaia_angular_seperation [ index_min_ang_seperation ] min_gaia_ang_seperation = gaia_angular_seperation \\ [ np . where ( np . min ( gaia_ang_seperation_selected ) \\ == gaia_angular_seperation )[ 0 ]] index_min_ang_seperation = np . where ( min_gaia_ang_seperation \\ == gaia_angular_seperation )[ 0 ] data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], \\ err_ps_dec [ j ], ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], \\ e_ec_rmag [ j ], ec_imag [ j ], e_ec_imag [ j ], ec_zmag [ j ], \\ e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], teff [ j ], \\ logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , \\ gaia_source_id [ index_min_ang_seperation ][ 0 ], gaia_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_ra_error [ index_min_ang_seperation ][ 0 ], gaia_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_dec_error [ index_min_ang_seperation ][ 0 ], gaia_parallax [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax_error [ index_min_ang_seperation ][ 0 ], gaia_pm [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra [ index_min_ang_seperation ][ 0 ], gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec [ index_min_ang_seperation ][ 0 ], gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_ruwe [ index_min_ang_seperation ][ 0 ], objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], \\ nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], \\ rinfoflag3 [ j ], iinfoflag [ j ], iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], \\ zinfoflag3 [ j ], yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 0.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , - 999 , - 999 , - 999 , \\ - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , - 999 , objinfoflag [ j ], \\ qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], ginfoflag2 [ j ], \\ ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], \\ yinfoflag [ j ], yinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) elif len ( index_min_ang_seperation ) == 1.0 : data = ps1_objid [ j ], ps_ra [ j ], err_ps_ra [ j ], ps_dec [ j ], err_ps_dec [ j ], \\ ec_gmag [ j ], e_ec_gmag [ j ], ec_rmag [ j ], e_ec_rmag [ j ], ec_imag [ j ], \\ e_ec_imag [ j ], ec_zmag [ j ], e_ec_zmag [ j ], ec_ymag [ j ], e_ec_ymag [ j ], \\ teff [ j ], logg [ j ], feh [ j ], sam_g [ j ], sam_r [ j ], sam_i [ j ], sam_z [ j ], \\ sam_y [ j ], sam_j [ j ], sam_h [ j ], sam_k [ j ], sf_avg [ 0 ], sigma_sf , \\ min_dquad_element , computed_j [ 0 ], computed_j_error , computed_h [ 0 ], \\ computed_h_error , computed_k [ 0 ], computed_k_error , gaia_source_id [ index_min_ang_seperation ][ 0 ], \\ gaia_ra [ index_min_ang_seperation ][ 0 ], gaia_ra_error [ index_min_ang_seperation ][ 0 ], \\ gaia_dec [ index_min_ang_seperation ][ 0 ], gaia_dec_error [ index_min_ang_seperation ][ 0 ], \\ gaia_parallax [ index_min_ang_seperation ][ 0 ], gaia_parallax_error [ index_min_ang_seperation ][ 0 ], \\ gaia_pm [ index_min_ang_seperation ][ 0 ], gaia_pm_ra [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_ra_error [ index_min_ang_seperation ][ 0 ], gaia_pm_dec [ index_min_ang_seperation ][ 0 ], \\ gaia_pm_dec_error [ index_min_ang_seperation ][ 0 ], gaia_ruwe [ index_min_ang_seperation ][ 0 ], \\ objinfoflag [ j ], qualityflag [ j ], ndetections [ j ], nstackdetections [ j ], ginfoflag [ j ], \\ ginfoflag2 [ j ], ginfoflag3 [ j ], rinfoflag [ j ], rinfoflag2 [ j ], rinfoflag3 [ j ], iinfoflag [ j ], \\ iinfoflag2 [ j ], iinfoflag3 [ j ], zinfoflag [ j ], zinfoflag2 [ j ], zinfoflag3 [ j ], yinfoflag [ j ], \\ iinfoflag2 [ j ], yinfoflag3 [ j ] writer . writerow ( data ) return data","title":"generate_irgsc()"},{"location":"apireference/#irgsctool._validate.ValidateIRGSC","text":"The Validate class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. Source code in irgsctool/_validate.pyclass ValidateIRGSC (): \"\"\" ------------------------------------------ The ***Validate*** class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data def validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"ValidateIRGSC"},{"location":"apireference/#irgsctool._validate.ValidateIRGSC.read_irgsc","text":"irgsctool.validate.read_irgsc() reads the generated IRGSC for a given set of coordinates. Raises: Type Description FileNotFoundError if there is no generated IRGSC available and then generates it. Source code in irgsctool/_validate.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data","title":"read_irgsc()"},{"location":"apireference/#irgsctool._validate.ValidateIRGSC.validate","text":"Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. Source code in irgsctool/_validate.pydef validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"validate()"},{"location":"license/","text":"\"\"\"MIT License Copyright (c) 2023 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARraNTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARraNTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTraCT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \"\"\"","title":"License"},{"location":"tutorials/","text":"irgsctool Getting Started Installation This package can be found on pypi/irgsctool pip install irgsctool Usage This is how to use irgsctool: >>> import irgsctool","title":"Tutorials"},{"location":"tutorials/#irgsctool","text":"","title":"irgsctool"},{"location":"tutorials/#getting-started","text":"","title":"Getting Started"},{"location":"tutorials/#installation","text":"This package can be found on pypi/irgsctool pip install irgsctool","title":"Installation"},{"location":"tutorials/#usage","text":"This is how to use irgsctool: >>> import irgsctool","title":"Usage"},{"location":"userguide/","text":"User Guide ValidateIRGSC The Validate class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. Source code in irgsctool/_validate.pyclass ValidateIRGSC (): \"\"\" ------------------------------------------ The ***Validate*** class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data def validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () read_irgsc () irgsctool.validate.read_irgsc() reads the generated IRGSC for a given set of coordinates. Raises: Type Description FileNotFoundError if there is no generated IRGSC available and then generates it. Source code in irgsctool/_validate.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data validate ( validate = True ) Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. Source code in irgsctool/_validate.pydef validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"UserGuide"},{"location":"userguide/#user-guide","text":"","title":"User Guide"},{"location":"userguide/#irgsctool._validate.ValidateIRGSC","text":"The Validate class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. Source code in irgsctool/_validate.pyclass ValidateIRGSC (): \"\"\" ------------------------------------------ The ***Validate*** class includes functions to validate the generated irgsc, generate a validated catalog and plot the comparison of the observed and computed NIR magnitudes. \"\"\" def __init__ ( self , ra , dec ): self . ra , self . dec = ra , dec self . rd = ReadData ( ra , dec ) def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data def validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"ValidateIRGSC"},{"location":"userguide/#irgsctool._validate.ValidateIRGSC.read_irgsc","text":"irgsctool.validate.read_irgsc() reads the generated IRGSC for a given set of coordinates. Raises: Type Description FileNotFoundError if there is no generated IRGSC available and then generates it. Source code in irgsctool/_validate.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def read_irgsc ( self ): \"\"\" ***irgsctool.validate.read_irgsc()*** reads the generated IRGSC for a given set of coordinates. Raises: FileNotFoundError: if there is no generated IRGSC available and then generates it. \"\"\" ra_name = str ( self . ra ) . replace ( '.' , '_' ) dec_name = str ( self . dec ) . replace ( '.' , '_' ) try : irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 except FileNotFoundError : gc = GenerateIRGSC ( self . ra , self . dec ) gc . generate_irgsc () irgsc_data = np . genfromtxt ( 'IRGSC' + '_' + 'RA' + str ( ra_name ) + 'DEC' + str ( dec_name ) + \\ str ( current_datetime ) + '.csv' , delimiter = ',' , skip_header = 1 ) ps1_objid = irgsc_data [:, 0 ]; ps_ra = irgsc_data [:, 1 ]; err_ps_ra = irgsc_data [:, 2 ]; ps_dec = irgsc_data [:, 3 ]; \\ err_ps_dec = irgsc_data [:, 4 ]; ec_gmag = irgsc_data [:, 5 ]; e_ec_gmag = irgsc_data [:, 6 ]; ec_rmag = irgsc_data [:, 7 ]; \\ e_ec_rmag = irgsc_data [:, 8 ]; ec_imag = irgsc_data [:, 9 ]; e_ec_imag = irgsc_data [:, 10 ]; ec_zmag = irgsc_data [:, 11 ]; \\ e_ec_zmag = irgsc_data [:, 12 ]; ec_ymag = irgsc_data [:, 13 ]; e_ec_ymag = irgsc_data [:, 14 ]; teff = irgsc_data [:, 15 ]; \\ logg = irgsc_data [:, 16 ]; feh = irgsc_data [:, 17 ]; sam_g = irgsc_data [:, 18 ]; sam_r = irgsc_data [:, 19 ]; sam_i = irgsc_data [:, 20 ]; sam_z = irgsc_data [:, 21 ]; \\ sam_y = irgsc_data [:, 22 ]; sam_j = irgsc_data [:, 23 ]; sam_h = irgsc_data [:, 24 ]; sam_k = irgsc_data [:, 25 ]; sf_avg = irgsc_data [:, 26 ]; sigma_sf = irgsc_data [:, 27 ]; \\ min_dquad_element = irgsc_data [:, 28 ]; computed_j = irgsc_data [:, 29 ]; computed_j_error = irgsc_data [:, 30 ]; computed_h = irgsc_data [:, 31 ]; \\ computed_h_error = irgsc_data [:, 32 ]; computed_k = irgsc_data [:, 33 ]; computed_k_error = irgsc_data [:, 34 ]; \\ gaia_source_id = irgsc_data [:, 35 ]; gaia_ra = irgsc_data [:, 36 ]; gaia_ra_error = irgsc_data [:, 37 ]; \\ gaia_dec = irgsc_data [:, 38 ]; gaia_dec_error = irgsc_data [:, 39 ]; gaia_parallax = irgsc_data [:, 40 ]; \\ gaia_parallax_error = irgsc_data [:, 41 ]; gaia_pm = irgsc_data [:, 42 ]; gaia_pm_ra = irgsc_data [:, 43 ]; gaia_pm_ra_error = irgsc_data [:, 44 ]; \\ gaia_pm_dec = irgsc_data [:, 45 ]; gaia_pm_dec_error = irgsc_data [:, 46 ]; gaia_ruwe = irgsc_data [:, 47 ]; \\ objinfoflag = irgsc_data [:, 48 ]; qualityflag = irgsc_data [:, 49 ]; ndetections = irgsc_data [:, 50 ]; \\ nstackdetections = irgsc_data [:, 51 ]; ginfoflag = irgsc_data [:, 52 ]; ginfoflag2 = irgsc_data [:, 53 ]; \\ ginfoflag3 = irgsc_data [:, 54 ]; rinfoflag = irgsc_data [:, 55 ]; rinfoflag2 = irgsc_data [:, 56 ]; \\ rinfoflag3 = irgsc_data [:, 57 ]; iinfoflag = irgsc_data [:, 58 ]; iinfoflag2 = irgsc_data [:, 59 ]; \\ iinfoflag3 = irgsc_data [:, 60 ]; zinfoflag = irgsc_data [:, 61 ]; zinfoflag2 = irgsc_data [:, 62 ]; \\ zinfoflag3 = irgsc_data [:, 63 ]; yinfoflag = irgsc_data [:, 64 ]; yinfoflag2 = irgsc_data [:, 65 ]; \\ yinfoflag3 = irgsc_data [:, 66 ] irgsc_data = ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , e_ec_rmag , \\ ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , logg , feh , sam_g , \\ sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , min_dquad_element , \\ computed_j , computed_j_error , computed_h , computed_h_error , computed_k , computed_k_error , \\ gaia_source_id , gaia_ra , gaia_ra_error , gaia_dec , gaia_dec_error , gaia_parallax , \\ gaia_parallax_error , gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , \\ gaia_pm_dec_error , gaia_ruwe , objinfoflag , qualityflag , ndetections , \\ nstackdetections , ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , \\ rinfoflag3 , iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 return irgsc_data","title":"read_irgsc()"},{"location":"userguide/#irgsctool._validate.ValidateIRGSC.validate","text":"Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. Source code in irgsctool/_validate.pydef validate ( self , validate = True ): \"\"\" Function to compare the observed and computed NIR magnitudes for a given field. If this is set to True, the function first obtains the UKIDSS data for the given field. Raises an error if UKIDSS data is not available. Raises warning if J and H band data from UKIDSS is not available. \"\"\" print ( \"\" ) print ( '###############################################################################' ) print ( 'Now validating the generated IRGSC using the UKIDSS data file if it is present.' ) print ( \"\" ) print ( '###############################################################################' ) if validate is True : ukidss_data = self . rd . read_nir_data () irgsc_data = self . read_irgsc () ukidss_j , ukidss_h , ukidss_k , e_ukidss_j , e_ukidss_h , e_ukidss_k , ukidss_ra , ukidss_dec = ukidss_data ps1_objid , ps_ra , err_ps_ra , ps_dec , err_ps_dec , ec_gmag , e_ec_gmag , ec_rmag , \\ e_ec_rmag , ec_imag , e_ec_imag , ec_zmag , e_ec_zmag , ec_ymag , e_ec_ymag , teff , \\ logg , feh , sam_g , sam_r , sam_i , sam_z , sam_y , sam_j , sam_h , sam_k , sf_avg , sigma_sf , \\ min_dquad_element , computed_j , computed_j_error , computed_h , computed_h_error , \\ computed_k , computed_k_error , gaia_source_id , gaia_ra , gaia_ra_error , \\ gaia_dec , gaia_dec_error , gaia_parallax , gaia_parallax_error , \\ gaia_pm , gaia_pm_ra , gaia_pm_ra_error , gaia_pm_dec , gaia_pm_dec_error , \\ gaia_ruwe , objinfoflag , qualityflag , ndetections , nstackdetections , \\ ginfoflag , ginfoflag2 , ginfoflag3 , rinfoflag , rinfoflag2 , rinfoflag3 , \\ iinfoflag , iinfoflag2 , iinfoflag3 , zinfoflag , zinfoflag2 , \\ zinfoflag3 , yinfoflag , yinfoflag2 , yinfoflag3 = irgsc_data validate_params = []; ob_j = []; e_ob_j = []; ob_h = []; e_ob_h = []; ob_k = []; e_ob_k = [] diff_jf = []; diff_hf = []; diff_kf = [] ra_name = str ( self . ra ) . replace ( '.' , '_' ); dec_name = str ( self . dec ) . replace ( '.' , '_' ) with open ( 'validated_IRGSC' + '_' + 'RA' + str ( ra_name ) + '_' + 'DEC' + str ( dec_name ) + '_' + str ( current_datetime ) + '.csv' , 'w' ) as file2 : writer = csv . writer ( file2 ) writer . writerow ( header ) for i1 in range ( len ( ps_ra )): #positionally matching the sources in the UKIDSS within 1\" to the PS1 sources in the catalogue gamma_ukidss = 3600 * np . sqrt ((( ps_ra [ i1 ] - ukidss_ra ) * np . cos ( np . radians ( ps_dec [ i1 ]))) ** 2 \\ + ( ps_dec [ i1 ] - ukidss_dec ) ** 2 ) index_ukidss_position = np . where ( gamma_ukidss <= 1.0 )[ 0 ] if len ( index_ukidss_position ) > 1 : matched_positions = gamma_ukidss [ index_ukidss_position ] minimum_seperation = gamma_ukidss [ np . where ( np . min ( matched_positions ) == gamma_ukidss )[ 0 ]] index_minimum_seperation = np . where ( minimum_seperation == gamma_ukidss )[ 0 ] diff_j = ukidss_j [ index_minimum_seperation ] - computed_j [ i1 ] diff_h = ukidss_h [ index_minimum_seperation ] - computed_h [ i1 ] diff_k = ukidss_k [ index_minimum_seperation ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_minimum_seperation ], e_ukidss_j [ index_minimum_seperation ], ukidss_h [ index_minimum_seperation ], e_ukidss_h [ index_minimum_seperation ], \\ ukidss_k [ index_minimum_seperation ], e_ukidss_k [ index_minimum_seperation ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_minimum_seperation ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_minimum_seperation ]) ob_h = np . append ( ob_h , ukidss_h [ index_minimum_seperation ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_minimum_seperation ]) ob_k = np . append ( ob_k , ukidss_k [ index_minimum_seperation ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_minimum_seperation ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) elif len ( index_ukidss_position ) == 1 : diff_j = ukidss_j [ index_ukidss_position ] - computed_j [ i1 ] diff_h = ukidss_h [ index_ukidss_position ] - computed_h [ i1 ] diff_k = ukidss_k [ index_ukidss_position ] - computed_k [ i1 ] validate_params = ps1_objid [ i1 ], ps_ra [ i1 ], err_ps_ra [ i1 ], ps_dec [ i1 ], err_ps_dec [ i1 ], ec_gmag [ i1 ], e_ec_gmag [ i1 ], ec_rmag [ i1 ], \\ e_ec_rmag [ i1 ], ec_imag , e_ec_imag [ i1 ], ec_zmag , e_ec_zmag [ i1 ], ec_ymag , e_ec_ymag [ i1 ], teff [ i1 ], logg [ i1 ], feh [ i1 ], sam_g [ i1 ], \\ sam_r [ i1 ], sam_i [ i1 ], sam_z [ i1 ], sam_y [ i1 ], sam_j [ i1 ], sam_h [ i1 ], sam_k [ i1 ], sf_avg [ i1 ], sigma_sf [ i1 ], min_dquad_element [ i1 ], \\ computed_j [ i1 ], computed_j_error [ i1 ], computed_h [ i1 ], computed_h_error [ i1 ], computed_k [ i1 ], computed_k_error [ i1 ], gaia_source_id [ i1 ], \\ gaia_ra [ i1 ], gaia_ra_error [ i1 ], gaia_dec [ i1 ], gaia_dec_error [ i1 ], gaia_parallax [ i1 ], gaia_parallax_error [ i1 ], gaia_pm [ i1 ], gaia_pm_ra [ i1 ], \\ gaia_pm_ra_error [ i1 ], gaia_pm_dec [ i1 ], gaia_pm_dec_error [ i1 ], gaia_ruwe [ i1 ], objinfoflag [ i1 ], qualityflag [ i1 ], ndetections [ i1 ], nstackdetections [ i1 ], \\ ginfoflag [ i1 ], ginfoflag2 [ i1 ], ginfoflag3 [ i1 ], rinfoflag [ i1 ], rinfoflag2 [ i1 ], rinfoflag3 [ i1 ], iinfoflag [ i1 ], iinfoflag2 [ i1 ], iinfoflag3 [ i1 ], \\ zinfoflag [ i1 ], zinfoflag2 [ i1 ], zinfoflag3 [ i1 ], yinfoflag [ i1 ], yinfoflag2 [ i1 ], yinfoflag3 [ i1 ], diff_j , diff_h , diff_k , \\ ukidss_j [ index_ukidss_position ], e_ukidss_j [ index_ukidss_position ], ukidss_h [ index_ukidss_position ], e_ukidss_h [ index_ukidss_position ], \\ ukidss_k [ index_ukidss_position ], e_ukidss_k [ index_ukidss_position ] writer . writerow ( validate_params ) ob_j = np . append ( ob_j , ukidss_j [ index_ukidss_position ]) e_ob_j = np . append ( e_ob_j , e_ukidss_j [ index_ukidss_position ]) ob_h = np . append ( ob_h , ukidss_h [ index_ukidss_position ]) e_ob_h = np . append ( e_ob_h , e_ukidss_h [ index_ukidss_position ]) ob_k = np . append ( ob_k , ukidss_k [ index_ukidss_position ]) e_ob_k = np . append ( e_ob_k , e_ukidss_k [ index_ukidss_position ]) diff_jf = np . append ( diff_jf , diff_j ) diff_hf = np . append ( diff_hf , diff_h ) diff_kf = np . append ( diff_kf , diff_k ) indjp = np . where ( np . abs ( diff_jf ) < 0.2 )[ 0 ] indhp = np . where ( np . abs ( diff_hf ) < 0.2 )[ 0 ] indkp = np . where ( np . abs ( diff_kf ) < 0.2 )[ 0 ] plt . clf () plt . scatter ( ob_j , e_ob_j , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $J_ {UKIDSS} $' ) plt . xlabel ( '$J_ {UKIDSS} ' ) plt . savefig ( 'obj_vs_err_obj.png' ) plt . clf () plt . clf () plt . scatter ( ob_h , e_ob_h , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $H_ {UKIDSS} $' ) plt . xlabel ( '$H_ {UKIDSS} ' ) plt . savefig ( 'obh_vs_err_obh.png' ) plt . clf () plt . clf () plt . scatter ( ob_k , e_ob_k , s = 5 , alpha = 0.5 ) plt . grid () plt . ylabel ( 'Error in $K_ {UKIDSS} $' ) plt . xlabel ( '$K_ {UKIDSS} ' ) plt . savefig ( 'obk_vs_err_obk.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_j , diff_jf , alpha = 0.3 , s = 5 , color = 'g' , label = \\ 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_j , color = 'm' , edgecolor = 'g' , density = True , \\ alpha = 0.5 , label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_jf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , density = True , alpha = 0.5 , \\ facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_jf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_jf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($J_ {o} $ - $J_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indjp ) / len ( diff_jf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed J magnitude' ) ax_joint . set_ylabel ( '$J_ {UKIDSS} $ - $J_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_j' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) \\ + '.png' ) plt . clf () bins2 = np . arange ( diff_hf . min (), diff_hf . max () + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_h , diff_hf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_h , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_hf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_hf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_hf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($H_ {o} $ - $H_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indhp ) / len ( diff_hf )) + '%' )) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed H magnitude' ) ax_joint . set_ylabel ( '$H_ {UKIDSS} $ - $H_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_h' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf () bins2 = np . arange ( np . min ( diff_jf ), np . max ( diff_jf ) + .1 , 0.1 ) plt . clf () fig = plt . figure ( figsize = ( 10 , 10 )) from matplotlib.gridspec import GridSpec gs = GridSpec ( 4 , 4 ) ax_joint = fig . add_subplot ( gs [ 1 : 4 , 0 : 3 ]) ax_marg_x = fig . add_subplot ( gs [ 0 , 0 : 3 ]) ax_marg_y = fig . add_subplot ( gs [ 1 : 4 , 3 ]) ax_joint . scatter ( ob_k , diff_kf , alpha = 0.3 , s = 5 , color = 'g' , \\ label = 'No. of stars =' + str ( len ( ob_j ))) ax_joint . grid () ax_joint . set_ylim ( - 2 , 2 ) ax_joint . legend ( fontsize = 18 , loc = 'best' ) nx , bx , px = ax_marg_x . hist ( ob_k , color = 'm' , edgecolor = 'g' , alpha = 0.5 , \\ label = 'Observed J' ) ny , by , px = ax_marg_y . hist ( diff_kf , bins = bins2 , orientation = \"horizontal\" , \\ edgecolor = 'g' , alpha = 0.5 , facecolor = 'orange' , label = \\ 'Difference' ) biny_max = find_nearest ( ny , np . median ( ny )) print ( 'binymax=' , biny_max ) ax_marg_y . set_title ( 'Median at: %0.2f ' % ( by [ np . where ( ny == biny_max )[ 0 ][ 0 ]])) ax_marg_y . set_ylim ( - 2 , 2 ) ax_marg_x . grid () ax_marg_x . legend ( loc = 'best' ) ax_marg_y . grid () ax_marg_y . legend ( loc = 'best' ) ax_joint . set_title ( 'Median and spread of the scatter =' + str ( \" {:.3f} \" . format ( np . median ( diff_kf ))) \\ + r '$\\pm$' + str ( \" {:.3f} \" . format ( np . std ( diff_kf )))) ax_marg_x . set_title ( 'No. of sources lying in the range -0.2 < ($K_ {o} $ - $K_ {c} $) < 0.2 =' + \\ str ( \" {:.2f} \" . format ( 100 * len ( indkp ) / len ( diff_kf )) + '%' )) # Turn off tick labels on marginals plt . setp ( ax_marg_x . get_xticklabels (), visible = False ) plt . setp ( ax_marg_y . get_yticklabels (), visible = False ) # Set labels on joint ax_joint . set_xlabel ( 'Observed K magnitude' ) ax_joint . set_ylabel ( '$K_ {UKIDSS} $ - $K_ {Computed} $' ) # Set labels on marginals ax_marg_y . set_xlabel ( 'N' ) ax_marg_x . set_ylabel ( 'N' ) plt . savefig ( 'validation_plot_k' + '_' + 'RA' + '_' + str ( self . ra ) + '_' + 'DEC' + str ( self . dec ) + \\ '.png' ) plt . clf ()","title":"validate()"}]}